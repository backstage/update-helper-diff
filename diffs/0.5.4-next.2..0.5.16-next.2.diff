diff --git a/.eslintignore b/.eslintignore
new file mode 100644
index 0000000..e5b1994
--- /dev/null
+++ b/.eslintignore
@@ -0,0 +1 @@
+playwright.config.ts
diff --git a/.gitignore b/.gitignore
index d452ac2..fbf8139 100644
--- a/.gitignore
+++ b/.gitignore
@@ -51 +51,4 @@ site
 *.session.sql
+
+# E2E test reports
+e2e-test-report/
diff --git a/app-config.production.yaml b/app-config.production.yaml
index 8f0751c..05b02ac 100644
--- a/app-config.production.yaml
+++ b/app-config.production.yaml
@@ -30,2 +30,6 @@ backend:
 
+auth:
+  providers:
+    guest: null
+
 catalog:
diff --git a/app-config.yaml b/app-config.yaml
index 194549f..248cff1 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -38,3 +38,3 @@ integrations:
       # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
-      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
+      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
       token: ${GITHUB_TOKEN}
@@ -48,5 +48,6 @@ proxy:
   ### A typical reason to do this is to handle HTTPS and CORS for internal services.
-  # '/test':
-  #   target: 'https://example.com'
-  #   changeOrigin: true
+  # endpoints:
+  #   '/test':
+  #     target: 'https://example.com'
+  #     changeOrigin: true
 
@@ -65,3 +66,5 @@ auth:
   # see https://backstage.io/docs/auth/ to learn about auth providers
-  providers: {}
+  providers:
+    # See https://backstage.io/docs/auth/guest/provider
+    guest: {}
 
diff --git a/backstage.json b/backstage.json
index 952ce6c..6538ca5 100644
--- a/backstage.json
+++ b/backstage.json
@@ -1,3 +1,3 @@
 {
-  "version": "1.17.0-next.2"
+  "version": "1.28.0-next.2"
 }
diff --git a/lerna.json b/lerna.json
index 322929d..529a62f 100644
--- a/lerna.json
+++ b/lerna.json
@@ -3,4 +3,4 @@
   "npmClient": "yarn",
-  "useWorkspaces": true,
-  "version": "0.1.0"
+  "version": "0.1.0",
+  "$schema": "node_modules/lerna/schemas/lerna-schema.json"
 }
diff --git a/package.json b/package.json
index c7561da..4f0a096 100644
--- a/package.json
+++ b/package.json
@@ -5,3 +5,3 @@
   "engines": {
-    "node": "16 || 18"
+    "node": "18 || 20"
   },
@@ -19,2 +19,4 @@
     "test:all": "backstage-cli repo test --coverage",
+    "test:e2e": "playwright test",
+    "fix": "backstage-cli repo fix",
     "lint": "backstage-cli repo lint --since origin/master",
@@ -31,13 +33,15 @@
   "devDependencies": {
-    "@backstage/cli": "^0.22.10-next.1",
+    "@backstage/cli": "^0.26.7-next.2",
+    "@backstage/e2e-test-utils": "^0.1.1",
+    "@playwright/test": "^1.32.3",
     "@spotify/prettier-config": "^12.0.0",
-    "concurrently": "^6.0.0",
-    "lerna": "^4.0.0",
-    "node-gyp": "^9.0.0",
+    "concurrently": "^8.0.0",
+    "lerna": "^7.3.0",
+    "node-gyp": "^10.0.0",
     "prettier": "^2.3.2",
-    "typescript": "~5.0.0"
+    "typescript": "~5.4.0"
   },
   "resolutions": {
-    "@types/react": "^17",
-    "@types/react-dom": "^17"
+    "@types/react": "^18",
+    "@types/react-dom": "^18"
   },
diff --git a/packages/app/cypress.json b/packages/app/cypress.json
deleted file mode 100644
index 0cb845a..0000000
--- a/packages/app/cypress.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "baseUrl": "http://localhost:3001",
-  "fixturesFolder": false,
-  "pluginsFile": false,
-  "retries": 3
-}
diff --git a/packages/app/cypress/.eslintrc.json b/packages/app/cypress/.eslintrc.json
deleted file mode 100644
index b903ff2..0000000
--- a/packages/app/cypress/.eslintrc.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-  "plugins": ["cypress"],
-  "extends": ["plugin:cypress/recommended"],
-  "rules": {
-    "jest/expect-expect": [
-      "error",
-      {
-        "assertFunctionNames": ["expect", "cy.contains", "cy.**.should"]
-      }
-    ]
-  }
-}
diff --git a/packages/app/cypress/integration/app.js b/packages/app/cypress/integration/app.js
deleted file mode 100644
index 43fb2e3..0000000
--- a/packages/app/cypress/integration/app.js
+++ /dev/null
@@ -1,6 +0,0 @@
-describe('App', () => {
-  it('should render the catalog', () => {
-    cy.visit('/');
-    cy.contains('My Company Catalog');
-  });
-});
diff --git a/packages/app/e2e-tests/app.test.ts b/packages/app/e2e-tests/app.test.ts
new file mode 100644
index 0000000..839ff88
--- /dev/null
+++ b/packages/app/e2e-tests/app.test.ts
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2020 The Backstage Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { test, expect } from '@playwright/test';
+
+test('App should render the welcome page', async ({ page }) => {
+  await page.goto('/');
+
+  const enterButton = page.getByRole('button', { name: 'Enter' });
+  await expect(enterButton).toBeVisible();
+  await enterButton.click();
+
+  await expect(page.getByText('My Company Catalog')).toBeVisible();
+});
diff --git a/packages/app/package.json b/packages/app/package.json
index e93b1bd..2478bb3 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -13,34 +13,28 @@
     "test": "backstage-cli package test",
-    "lint": "backstage-cli package lint",
-    "test:e2e": "cross-env PORT=3001 start-server-and-test start http://localhost:3001 cy:dev",
-    "test:e2e:ci": "cross-env PORT=3001 start-server-and-test start http://localhost:3001 cy:run",
-    "cy:dev": "cypress open",
-    "cy:run": "cypress run --browser chrome"
+    "lint": "backstage-cli package lint"
   },
   "dependencies": {
-    "@backstage/app-defaults": "^1.4.2-next.0",
-    "@backstage/catalog-model": "^1.4.1",
-    "@backstage/cli": "^0.22.10-next.1",
-    "@backstage/core-app-api": "^1.9.1-next.0",
-    "@backstage/core-components": "^0.13.4-next.0",
-    "@backstage/core-plugin-api": "^1.5.3",
-    "@backstage/integration-react": "^1.1.16-next.1",
-    "@backstage/plugin-api-docs": "^0.9.7-next.2",
-    "@backstage/plugin-catalog": "^1.12.1-next.2",
-    "@backstage/plugin-catalog-common": "^1.0.15",
-    "@backstage/plugin-catalog-graph": "^0.2.33-next.2",
-    "@backstage/plugin-catalog-import": "^0.9.11-next.2",
-    "@backstage/plugin-catalog-react": "^1.8.1-next.1",
-    "@backstage/plugin-github-actions": "^0.6.2-next.2",
-    "@backstage/plugin-org": "^0.6.11-next.2",
-    "@backstage/plugin-permission-react": "^0.4.14",
-    "@backstage/plugin-scaffolder": "^1.14.2-next.2",
-    "@backstage/plugin-search": "^1.3.4-next.1",
-    "@backstage/plugin-search-react": "^1.6.4-next.0",
-    "@backstage/plugin-tech-radar": "^0.6.7-next.0",
-    "@backstage/plugin-techdocs": "^1.6.6-next.2",
-    "@backstage/plugin-techdocs-module-addons-contrib": "^1.0.16-next.1",
-    "@backstage/plugin-techdocs-react": "^1.1.9-next.0",
-    "@backstage/plugin-user-settings": "^0.7.6-next.1",
-    "@backstage/theme": "^0.4.1",
+    "@backstage/app-defaults": "^1.5.6-next.1",
+    "@backstage/catalog-model": "^1.5.0",
+    "@backstage/cli": "^0.26.7-next.2",
+    "@backstage/core-app-api": "^1.12.6-next.0",
+    "@backstage/core-components": "^0.14.8-next.1",
+    "@backstage/core-plugin-api": "^1.9.3-next.0",
+    "@backstage/integration-react": "^1.1.28-next.0",
+    "@backstage/plugin-api-docs": "^0.11.6-next.1",
+    "@backstage/plugin-catalog": "^1.21.0-next.2",
+    "@backstage/plugin-catalog-common": "^1.0.23",
+    "@backstage/plugin-catalog-graph": "^0.4.6-next.1",
+    "@backstage/plugin-catalog-import": "^0.12.0-next.2",
+    "@backstage/plugin-catalog-react": "^1.12.1-next.1",
+    "@backstage/plugin-org": "^0.6.26-next.1",
+    "@backstage/plugin-permission-react": "^0.4.23-next.0",
+    "@backstage/plugin-scaffolder": "^1.21.0-next.2",
+    "@backstage/plugin-search": "^1.4.12-next.2",
+    "@backstage/plugin-search-react": "^1.7.12-next.1",
+    "@backstage/plugin-techdocs": "^1.10.6-next.1",
+    "@backstage/plugin-techdocs-module-addons-contrib": "^1.1.11-next.1",
+    "@backstage/plugin-techdocs-react": "^1.2.5-next.1",
+    "@backstage/plugin-user-settings": "^0.8.7-next.1",
+    "@backstage/theme": "^0.5.6-next.0",
     "@material-ui/core": "^4.12.2",
@@ -48,4 +42,4 @@
     "history": "^5.0.0",
-    "react": "^17.0.2",
-    "react-dom": "^17.0.2",
+    "react": "^18.0.2",
+    "react-dom": "^18.0.2",
     "react-router": "^6.3.0",
@@ -55,13 +49,10 @@
   "devDependencies": {
-    "@backstage/test-utils": "^1.4.2-next.0",
-    "@testing-library/jest-dom": "^5.10.1",
-    "@testing-library/react": "^12.1.3",
+    "@backstage/test-utils": "^1.5.6-next.1",
+    "@playwright/test": "^1.32.3",
+    "@testing-library/jest-dom": "^6.0.0",
+    "@testing-library/react": "^14.0.0",
     "@testing-library/user-event": "^14.0.0",
-    "@testing-library/dom": "^8.0.0",
-    "@types/node": "^16.11.26",
+    "@testing-library/dom": "^9.0.0",
     "@types/react-dom": "*",
-    "cross-env": "^7.0.0",
-    "cypress": "^9.7.0",
-    "eslint-plugin-cypress": "^2.10.3",
-    "start-server-and-test": "^1.10.11"
+    "cross-env": "^7.0.0"
   },
diff --git a/packages/app/public/index.html b/packages/app/public/index.html
index c6083b3..18da7c4 100644
--- a/packages/app/public/index.html
+++ b/packages/app/public/index.html
@@ -8,5 +8,4 @@
       name="description"
-      content="Backstage is an open platform for building developer portals"
+      content="Backstage is an open source framework for building developer portals"
     />
-    <link rel="apple-touch-icon" href="<%= publicPath %>/logo192.png" />
     <!--
@@ -44,3 +43,3 @@
     />
-    <title><%= config.getString('app.title') %></title>
+    <title><%= config.getOptionalString('app.title') ?? 'Backstage' %></title>
   </head>
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index b94cac7..ec8ba1d 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -1,3 +1,3 @@
 import React from 'react';
-import { renderWithEffects } from '@backstage/test-utils';
+import { render, waitFor } from '@testing-library/react';
 import App from './App';
@@ -22,4 +22,7 @@ describe('App', () => {
 
-    const rendered = await renderWithEffects(<App />);
-    expect(rendered.baseElement).toBeInTheDocument();
+    const rendered = render(<App />);
+
+    await waitFor(() => {
+      expect(rendered.baseElement).toBeInTheDocument();
+    });
   });
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index 8d62f29..e24c468 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -15,3 +15,2 @@ import { orgPlugin } from '@backstage/plugin-org';
 import { SearchPage } from '@backstage/plugin-search';
-import { TechRadarPage } from '@backstage/plugin-tech-radar';
 import {
@@ -29,3 +28,7 @@ import { Root } from './components/Root';
 
-import { AlertDisplay, OAuthRequestDialog } from '@backstage/core-components';
+import {
+  AlertDisplay,
+  OAuthRequestDialog,
+  SignInPage,
+} from '@backstage/core-components';
 import { createApp } from '@backstage/app-defaults';
@@ -55,2 +58,5 @@ const app = createApp({
   },
+  components: {
+    SignInPage: props => <SignInPage {...props} auto providers={['guest']} />,
+  },
 });
@@ -78,6 +84,2 @@ const routes = (
     <Route path="/api-docs" element={<ApiExplorerPage />} />
-    <Route
-      path="/tech-radar"
-      element={<TechRadarPage width={1500} height={800} />}
-    />
     <Route
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index 6722ea2..53b6685 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -30,6 +30,2 @@ import {
 } from '@backstage/plugin-catalog';
-import {
-  isGithubActionsAvailable,
-  EntityGithubActionsContent,
-} from '@backstage/plugin-github-actions';
 import {
@@ -72,5 +68,9 @@ const cicdContent = (
   <EntitySwitch>
-    <EntitySwitch.Case if={isGithubActionsAvailable}>
-      <EntityGithubActionsContent />
-    </EntitySwitch.Case>
+    {/*
+      Here you can add support for different CI/CD services, for example
+      using @backstage-community/plugin-github-actions as follows:
+      <EntitySwitch.Case if={isGithubActionsAvailable}>
+        <EntityGithubActionsContent />
+      </EntitySwitch.Case>
+     */}
 
@@ -302,5 +302,8 @@ const groupPage = (
         </Grid>
-        <Grid item xs={12}>
+        <Grid item xs={12} md={6}>
           <EntityMembersListCard />
         </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityLinksCard />
+        </Grid>
       </Grid>
diff --git a/packages/app/src/index.tsx b/packages/app/src/index.tsx
index b16aaf7..d875c77 100644
--- a/packages/app/src/index.tsx
+++ b/packages/app/src/index.tsx
@@ -2,5 +2,5 @@ import '@backstage/cli/asset-types';
 import React from 'react';
-import ReactDOM from 'react-dom';
+import ReactDOM from 'react-dom/client';
 import App from './App';
 
-ReactDOM.render(<App />, document.getElementById('root'));
+ReactDOM.createRoot(document.getElementById('root')!).render(<App />);
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index d065e4a..18548e9 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -11,3 +11,3 @@
 
-FROM node:16-bullseye-slim
+FROM node:18-bookworm-slim
 
@@ -24,2 +24,3 @@ RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
     --mount=type=cache,target=/var/lib/apt,sharing=locked \
+    apt-get update && \
     apt-get install -y --no-install-recommends libsqlite3-dev
diff --git a/packages/backend/package.json b/packages/backend/package.json
index cfa8a81..365a46d 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -18,25 +18,29 @@
   "dependencies": {
-    "@backstage/backend-common": "^0.19.2-next.2",
-    "@backstage/backend-tasks": "^0.5.5-next.2",
-    "@backstage/catalog-client": "^1.4.3",
-    "@backstage/catalog-model": "^1.4.1",
-    "@backstage/config": "^1.0.8",
-    "@backstage/plugin-app-backend": "^0.3.48-next.2",
-    "@backstage/plugin-auth-backend": "^0.18.6-next.2",
-    "@backstage/plugin-auth-node": "^0.2.17-next.2",
-    "@backstage/plugin-catalog-backend": "^1.12.0-next.2",
-    "@backstage/plugin-permission-common": "^0.7.7",
-    "@backstage/plugin-permission-node": "^0.7.11-next.2",
-    "@backstage/plugin-proxy-backend": "^0.3.0-next.2",
-    "@backstage/plugin-scaffolder-backend": "^1.15.2-next.2",
-    "@backstage/plugin-search-backend": "^1.4.0-next.2",
-    "@backstage/plugin-search-backend-module-pg": "^0.5.9-next.2",
-    "@backstage/plugin-search-backend-node": "^1.2.4-next.2",
-    "@backstage/plugin-techdocs-backend": "^1.6.5-next.2",
+    "@backstage/backend-common": "^0.23.0-next.2",
+    "@backstage/backend-defaults": "^0.3.0-next.2",
+    "@backstage/backend-tasks": "^0.5.24-next.2",
+    "@backstage/config": "^1.2.0",
+    "@backstage/plugin-app-backend": "^0.3.68-next.2",
+    "@backstage/plugin-auth-backend": "^0.22.6-next.2",
+    "@backstage/plugin-auth-backend-module-github-provider": "^0.1.16-next.1",
+    "@backstage/plugin-auth-backend-module-guest-provider": "^0.1.5-next.2",
+    "@backstage/plugin-auth-node": "^0.4.14-next.2",
+    "@backstage/plugin-catalog-backend": "^1.23.0-next.2",
+    "@backstage/plugin-catalog-backend-module-scaffolder-entity-model": "^0.1.17-next.2",
+    "@backstage/plugin-permission-backend": "^0.5.43-next.2",
+    "@backstage/plugin-permission-backend-module-allow-all-policy": "^0.1.16-next.1",
+    "@backstage/plugin-permission-common": "^0.7.13",
+    "@backstage/plugin-permission-node": "^0.7.30-next.2",
+    "@backstage/plugin-proxy-backend": "^0.5.0-next.2",
+    "@backstage/plugin-scaffolder-backend": "^1.22.8-next.2",
+    "@backstage/plugin-search-backend": "^1.5.10-next.2",
+    "@backstage/plugin-search-backend-module-catalog": "^0.1.25-next.2",
+    "@backstage/plugin-search-backend-module-techdocs": "^0.1.24-next.2",
+    "@backstage/plugin-search-backend-node": "^1.2.24-next.2",
+    "@backstage/plugin-techdocs-backend": "^1.10.6-next.2",
     "app": "link:../app",
-    "better-sqlite3": "^8.0.0",
+    "better-sqlite3": "^9.0.0",
     "dockerode": "^3.3.1",
-    "express": "^4.17.1",
-    "express-promise-router": "^4.1.0",
-    "pg": "^8.3.0",
+    "node-gyp": "^10.0.0",
+    "pg": "^8.11.3",
     "winston": "^3.2.1"
@@ -44,3 +48,3 @@
   "devDependencies": {
-    "@backstage/cli": "^0.22.10-next.1",
+    "@backstage/cli": "^0.26.7-next.2",
     "@types/dockerode": "^3.3.0",
diff --git a/packages/backend/src/index.test.ts b/packages/backend/src/index.test.ts
deleted file mode 100644
index 7814b8c..0000000
--- a/packages/backend/src/index.test.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { PluginEnvironment } from './types';
-
-describe('test', () => {
-  it('unbreaks the test runner', () => {
-    const unbreaker = {} as PluginEnvironment;
-    expect(unbreaker).toBeTruthy();
-  });
-});
diff --git a/packages/backend/src/index.ts b/packages/backend/src/index.ts
index 1c08288..1c442a8 100644
--- a/packages/backend/src/index.ts
+++ b/packages/backend/src/index.ts
@@ -8,108 +8,34 @@
 
-import Router from 'express-promise-router';
-import {
-  createServiceBuilder,
-  loadBackendConfig,
-  getRootLogger,
-  useHotMemoize,
-  notFoundHandler,
-  CacheManager,
-  DatabaseManager,
-  HostDiscovery,
-  UrlReaders,
-  ServerTokenManager,
-} from '@backstage/backend-common';
-import { TaskScheduler } from '@backstage/backend-tasks';
-import { Config } from '@backstage/config';
-import app from './plugins/app';
-import auth from './plugins/auth';
-import catalog from './plugins/catalog';
-import scaffolder from './plugins/scaffolder';
-import proxy from './plugins/proxy';
-import techdocs from './plugins/techdocs';
-import search from './plugins/search';
-import { PluginEnvironment } from './types';
-import { ServerPermissionClient } from '@backstage/plugin-permission-node';
-import { DefaultIdentityClient } from '@backstage/plugin-auth-node';
-
-function makeCreateEnv(config: Config) {
-  const root = getRootLogger();
-  const reader = UrlReaders.default({ logger: root, config });
-  const discovery = HostDiscovery.fromConfig(config);
-  const cacheManager = CacheManager.fromConfig(config);
-  const databaseManager = DatabaseManager.fromConfig(config, { logger: root });
-  const tokenManager = ServerTokenManager.noop();
-  const taskScheduler = TaskScheduler.fromConfig(config);
-
-  const identity = DefaultIdentityClient.create({
-    discovery,
-  });
-  const permissions = ServerPermissionClient.fromConfig(config, {
-    discovery,
-    tokenManager,
-  });
-
-  root.info(`Created UrlReader ${reader}`);
-
-  return (plugin: string): PluginEnvironment => {
-    const logger = root.child({ type: 'plugin', plugin });
-    const database = databaseManager.forPlugin(plugin);
-    const cache = cacheManager.forPlugin(plugin);
-    const scheduler = taskScheduler.forPlugin(plugin);
-    return {
-      logger,
-      database,
-      cache,
-      config,
-      reader,
-      discovery,
-      tokenManager,
-      scheduler,
-      permissions,
-      identity,
-    };
-  };
-}
-
-async function main() {
-  const config = await loadBackendConfig({
-    argv: process.argv,
-    logger: getRootLogger(),
-  });
-  const createEnv = makeCreateEnv(config);
-
-  const catalogEnv = useHotMemoize(module, () => createEnv('catalog'));
-  const scaffolderEnv = useHotMemoize(module, () => createEnv('scaffolder'));
-  const authEnv = useHotMemoize(module, () => createEnv('auth'));
-  const proxyEnv = useHotMemoize(module, () => createEnv('proxy'));
-  const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));
-  const searchEnv = useHotMemoize(module, () => createEnv('search'));
-  const appEnv = useHotMemoize(module, () => createEnv('app'));
-
-  const apiRouter = Router();
-  apiRouter.use('/catalog', await catalog(catalogEnv));
-  apiRouter.use('/scaffolder', await scaffolder(scaffolderEnv));
-  apiRouter.use('/auth', await auth(authEnv));
-  apiRouter.use('/techdocs', await techdocs(techdocsEnv));
-  apiRouter.use('/proxy', await proxy(proxyEnv));
-  apiRouter.use('/search', await search(searchEnv));
-
-  // Add backends ABOVE this line; this 404 handler is the catch-all fallback
-  apiRouter.use(notFoundHandler());
-
-  const service = createServiceBuilder(module)
-    .loadConfig(config)
-    .addRouter('/api', apiRouter)
-    .addRouter('', await app(appEnv));
-
-  await service.start().catch(err => {
-    console.log(err);
-    process.exit(1);
-  });
-}
-
-module.hot?.accept();
-main().catch(error => {
-  console.error('Backend failed to start up', error);
-  process.exit(1);
-});
+import { createBackend } from '@backstage/backend-defaults';
+
+const backend = createBackend();
+
+backend.add(import('@backstage/plugin-app-backend/alpha'));
+backend.add(import('@backstage/plugin-proxy-backend/alpha'));
+backend.add(import('@backstage/plugin-scaffolder-backend/alpha'));
+backend.add(import('@backstage/plugin-techdocs-backend/alpha'));
+
+// auth plugin
+backend.add(import('@backstage/plugin-auth-backend'));
+// See https://backstage.io/docs/backend-system/building-backends/migrating#the-auth-plugin
+backend.add(import('@backstage/plugin-auth-backend-module-guest-provider'));
+// See https://backstage.io/docs/auth/guest/provider
+
+// catalog plugin
+backend.add(import('@backstage/plugin-catalog-backend/alpha'));
+backend.add(
+  import('@backstage/plugin-catalog-backend-module-scaffolder-entity-model'),
+);
+
+// permission plugin
+backend.add(import('@backstage/plugin-permission-backend/alpha'));
+backend.add(
+  import('@backstage/plugin-permission-backend-module-allow-all-policy'),
+);
+
+// search plugin
+backend.add(import('@backstage/plugin-search-backend/alpha'));
+backend.add(import('@backstage/plugin-search-backend-module-catalog/alpha'));
+backend.add(import('@backstage/plugin-search-backend-module-techdocs/alpha'));
+
+backend.start();
diff --git a/packages/backend/src/plugins/app.ts b/packages/backend/src/plugins/app.ts
deleted file mode 100644
index 7c37f68..0000000
--- a/packages/backend/src/plugins/app.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { createRouter } from '@backstage/plugin-app-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    database: env.database,
-    appPackageName: 'app',
-  });
-}
diff --git a/packages/backend/src/plugins/auth.ts b/packages/backend/src/plugins/auth.ts
deleted file mode 100644
index 77eb6aa..0000000
--- a/packages/backend/src/plugins/auth.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-import {
-  createRouter,
-  providers,
-  defaultAuthProviderFactories,
-} from '@backstage/plugin-auth-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    database: env.database,
-    discovery: env.discovery,
-    tokenManager: env.tokenManager,
-    providerFactories: {
-      ...defaultAuthProviderFactories,
-
-      // This replaces the default GitHub auth provider with a customized one.
-      // The `signIn` option enables sign-in for this provider, using the
-      // identity resolution logic that's provided in the `resolver` callback.
-      //
-      // This particular resolver makes all users share a single "guest" identity.
-      // It should only be used for testing and trying out Backstage.
-      //
-      // If you want to use a production ready resolver you can switch to
-      // the one that is commented out below, it looks up a user entity in the
-      // catalog using the GitHub username of the authenticated user.
-      // That resolver requires you to have user entities populated in the catalog,
-      // for example using https://backstage.io/docs/integrations/github/org
-      //
-      // There are other resolvers to choose from, and you can also create
-      // your own, see the auth documentation for more details:
-      //
-      //   https://backstage.io/docs/auth/identity-resolver
-      github: providers.github.create({
-        signIn: {
-          resolver(_, ctx) {
-            const userRef = 'user:default/guest'; // Must be a full entity reference
-            return ctx.issueToken({
-              claims: {
-                sub: userRef, // The user's own identity
-                ent: [userRef], // A list of identities that the user claims ownership through
-              },
-            });
-          },
-          // resolver: providers.github.resolvers.usernameMatchingUserEntityName(),
-        },
-      }),
-    },
-  });
-}
diff --git a/packages/backend/src/plugins/catalog.ts b/packages/backend/src/plugins/catalog.ts
deleted file mode 100644
index 876cb6b..0000000
--- a/packages/backend/src/plugins/catalog.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { CatalogBuilder } from '@backstage/plugin-catalog-backend';
-import { ScaffolderEntitiesProcessor } from '@backstage/plugin-scaffolder-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  const builder = await CatalogBuilder.create(env);
-  builder.addProcessor(new ScaffolderEntitiesProcessor());
-  const { processingEngine, router } = await builder.build();
-  await processingEngine.start();
-  return router;
-}
diff --git a/packages/backend/src/plugins/proxy.ts b/packages/backend/src/plugins/proxy.ts
deleted file mode 100644
index 54ec393..0000000
--- a/packages/backend/src/plugins/proxy.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { createRouter } from '@backstage/plugin-proxy-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    discovery: env.discovery,
-  });
-}
diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
deleted file mode 100644
index a12fee2..0000000
--- a/packages/backend/src/plugins/scaffolder.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-import { CatalogClient } from '@backstage/catalog-client';
-import { createRouter } from '@backstage/plugin-scaffolder-backend';
-import { Router } from 'express';
-import type { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  const catalogClient = new CatalogClient({
-    discoveryApi: env.discovery,
-  });
-
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    database: env.database,
-    reader: env.reader,
-    catalogClient,
-    identity: env.identity,
-    permissions: env.permissions,
-  });
-}
diff --git a/packages/backend/src/plugins/search.ts b/packages/backend/src/plugins/search.ts
deleted file mode 100644
index e9469dc..0000000
--- a/packages/backend/src/plugins/search.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-import { useHotCleanup } from '@backstage/backend-common';
-import { createRouter } from '@backstage/plugin-search-backend';
-import {
-  IndexBuilder,
-  LunrSearchEngine,
-} from '@backstage/plugin-search-backend-node';
-import { PluginEnvironment } from '../types';
-import { DefaultCatalogCollatorFactory } from '@backstage/plugin-catalog-backend';
-import { DefaultTechDocsCollatorFactory } from '@backstage/plugin-techdocs-backend';
-import { Router } from 'express';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  // Initialize a connection to a search engine.
-  const searchEngine = new LunrSearchEngine({
-    logger: env.logger,
-  });
-  const indexBuilder = new IndexBuilder({
-    logger: env.logger,
-    searchEngine,
-  });
-
-  const schedule = env.scheduler.createScheduledTaskRunner({
-    frequency: { minutes: 10 },
-    timeout: { minutes: 15 },
-    // A 3 second delay gives the backend server a chance to initialize before
-    // any collators are executed, which may attempt requests against the API.
-    initialDelay: { seconds: 3 },
-  });
-
-  // Collators are responsible for gathering documents known to plugins. This
-  // collator gathers entities from the software catalog.
-  indexBuilder.addCollator({
-    schedule,
-    factory: DefaultCatalogCollatorFactory.fromConfig(env.config, {
-      discovery: env.discovery,
-      tokenManager: env.tokenManager,
-    }),
-  });
-
-  // collator gathers entities from techdocs.
-  indexBuilder.addCollator({
-    schedule,
-    factory: DefaultTechDocsCollatorFactory.fromConfig(env.config, {
-      discovery: env.discovery,
-      logger: env.logger,
-      tokenManager: env.tokenManager,
-    }),
-  });
-
-  // The scheduler controls when documents are gathered from collators and sent
-  // to the search engine for indexing.
-  const { scheduler } = await indexBuilder.build();
-  scheduler.start();
-
-  useHotCleanup(module, () => scheduler.stop());
-
-  return await createRouter({
-    engine: indexBuilder.getSearchEngine(),
-    types: indexBuilder.getDocumentTypes(),
-    permissions: env.permissions,
-    config: env.config,
-    logger: env.logger,
-  });
-}
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
deleted file mode 100644
index be8bb0c..0000000
--- a/packages/backend/src/plugins/techdocs.ts
+++ /dev/null
@@ -1,51 +0,0 @@
-import { DockerContainerRunner } from '@backstage/backend-common';
-import {
-  createRouter,
-  Generators,
-  Preparers,
-  Publisher,
-} from '@backstage/plugin-techdocs-backend';
-import Docker from 'dockerode';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  // Preparers are responsible for fetching source files for documentation.
-  const preparers = await Preparers.fromConfig(env.config, {
-    logger: env.logger,
-    reader: env.reader,
-  });
-
-  // Docker client (conditionally) used by the generators, based on techdocs.generators config.
-  const dockerClient = new Docker();
-  const containerRunner = new DockerContainerRunner({ dockerClient });
-
-  // Generators are used for generating documentation sites.
-  const generators = await Generators.fromConfig(env.config, {
-    logger: env.logger,
-    containerRunner,
-  });
-
-  // Publisher is used for
-  // 1. Publishing generated files to storage
-  // 2. Fetching files from storage and passing them to TechDocs frontend.
-  const publisher = await Publisher.fromConfig(env.config, {
-    logger: env.logger,
-    discovery: env.discovery,
-  });
-
-  // checks if the publisher is working and logs the result
-  await publisher.getReadiness();
-
-  return await createRouter({
-    preparers,
-    generators,
-    publisher,
-    logger: env.logger,
-    config: env.config,
-    discovery: env.discovery,
-    cache: env.cache,
-  });
-}
diff --git a/packages/backend/src/types.ts b/packages/backend/src/types.ts
deleted file mode 100644
index 9cd2c74..0000000
--- a/packages/backend/src/types.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import { Logger } from 'winston';
-import { Config } from '@backstage/config';
-import {
-  PluginCacheManager,
-  PluginDatabaseManager,
-  PluginEndpointDiscovery,
-  TokenManager,
-  UrlReader,
-} from '@backstage/backend-common';
-import { PluginTaskScheduler } from '@backstage/backend-tasks';
-import { PermissionEvaluator } from '@backstage/plugin-permission-common';
-import { IdentityApi } from '@backstage/plugin-auth-node';
-
-export type PluginEnvironment = {
-  logger: Logger;
-  database: PluginDatabaseManager;
-  cache: PluginCacheManager;
-  config: Config;
-  reader: UrlReader;
-  discovery: PluginEndpointDiscovery;
-  tokenManager: TokenManager;
-  scheduler: PluginTaskScheduler;
-  permissions: PermissionEvaluator;
-  identity: IdentityApi;
-};
diff --git a/playwright.config.ts b/playwright.config.ts
new file mode 100644
index 0000000..733be13
--- /dev/null
+++ b/playwright.config.ts
@@ -0,0 +1,60 @@
+/*
+ * Copyright 2023 The Backstage Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { defineConfig } from '@playwright/test';
+import { generateProjects } from '@backstage/e2e-test-utils/playwright';
+
+/**
+ * See https://playwright.dev/docs/test-configuration.
+ */
+export default defineConfig({
+  timeout: 60_000,
+
+  expect: {
+    timeout: 5_000,
+  },
+
+  // Run your local dev server before starting the tests
+  webServer: process.env.CI
+    ? []
+    : [
+        {
+          command: 'yarn dev',
+          port: 3000,
+          reuseExistingServer: true,
+          timeout: 60_000,
+        },
+      ],
+
+  forbidOnly: !!process.env.CI,
+
+  retries: process.env.CI ? 2 : 0,
+
+  reporter: [['html', { open: 'never', outputFolder: 'e2e-test-report' }]],
+
+  use: {
+    actionTimeout: 0,
+    baseURL:
+      process.env.PLAYWRIGHT_URL ??
+      (process.env.CI ? 'http://localhost:7007' : 'http://localhost:3000'),
+    screenshot: 'only-on-failure',
+    trace: 'on-first-retry',
+  },
+
+  outputDir: 'node_modules/.cache/e2e-test-results',
+
+  projects: generateProjects(), // Find all packages with e2e-test folders
+});
diff --git a/yarn.lock b/yarn.lock
index 5ad7fe2..b9f8ad3 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1 +1,8 @@
-# intentionally left empty
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
+
+
+ajv@^8.0.0, ajv@^8.10.0, ajv@^8.11.0, ajv@^8.12.0, ajv@^8.14.0, ajv@^8.6.0, ajv@^8.6.3, ajv@^8.8.2, ajv@^8.9.0:
+  version "8.14.0"
+  resolved "https://registry.yarnpkg.com/ajv/-/ajv-8.14.0.tgz#f514ddfd4756abb200e1704414963620a625ebbb"
+  integrity sha512-oYs1UUtO97ZO2lJ4bwnWeQW8/zvOIQLGKcvPTsWmvc2SYgBb+upuNS5NxoLaMU4h8Ju3Nbj6Cq8mD2LQoqVKFA==
