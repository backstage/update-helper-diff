diff --git a/.dockerignore b/.dockerignore
index 63c9c34..505a7b5 100644
--- a/.dockerignore
+++ b/.dockerignore
@@ -2,4 +2,5 @@
 node_modules
-packages
-!packages/backend/dist
+packages/*/src
+packages/*/node_modules
 plugins
+*.local.yaml
diff --git a/app-config.production.yaml b/app-config.production.yaml
index 92f4574..6535d96 100644
--- a/app-config.production.yaml
+++ b/app-config.production.yaml
@@ -1,8 +1,40 @@
 app:
-  # Should be the same as backend.baseUrl when using the `app-backend` plugin
-  baseUrl: http://localhost:7000
+  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
+  baseUrl: http://localhost:7007
 
 backend:
-  baseUrl: http://localhost:7000
+  # Note that the baseUrl should be the URL that the browser and other clients
+  # should use when communicating with the backend, i.e. it needs to be
+  # reachable not just from within the backend host, but from all of your
+  # callers. When its value is "http://localhost:7007", it's strictly private
+  # and can't be reached by others.
+  baseUrl: http://localhost:7007
   listen:
-    port: 7000
+    port: 7007
+    # The following host directive binds to all IPv4 interfaces when its value
+    # is "0.0.0.0". This is the most permissive setting. The right value depends
+    # on your specific deployment. If you remove the host line entirely, the
+    # backend will bind on the interface that corresponds to the backend.baseUrl
+    # hostname.
+    host: 0.0.0.0
+
+  # config options: https://node-postgres.com/api/client
+  database:
+    client: pg
+    connection:
+      host: ${POSTGRES_HOST}
+      port: ${POSTGRES_PORT}
+      user: ${POSTGRES_USER}
+      password: ${POSTGRES_PASSWORD}
+      # https://node-postgres.com/features/ssl
+      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
+      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
+      # ssl:
+      #   ca: # if you have a CA file and want to verify it you can uncomment this section
+      #     $file: <file-path>/ca/server.crt
+
+catalog:
+  # Overrides the default list locations from app-config.yaml as these contain example data.
+  # See https://backstage.io/docs/features/software-catalog/software-catalog-overview#adding-components-to-the-catalog for more details
+  # on how to get entities into the catalog.
+  locations: []
diff --git a/app-config.yaml b/app-config.yaml
index 93b0c3f..cd6998d 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -8,5 +8,14 @@ organization:
 backend:
-  baseUrl: http://localhost:7000
+  # Used for enabling authentication, secret is shared by all backend plugins
+  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
+  # information on the format
+  # auth:
+  #   keys:
+  #     - secret: ${BACKEND_SECRET}
+  baseUrl: http://localhost:7007
   listen:
-    port: 7000
+    port: 7007
+    # Uncomment the following host directive to bind to all IPv4 interfaces and
+    # not just the baseUrl hostname.
+    # host: 0.0.0.0
   csp:
@@ -19,4 +28,6 @@ backend:
     credentials: true
+  # This is for local developement only, it is not recommended to use this in production
+  # The production database configuration is stored in app-config.production.yaml
   database:
-    client: sqlite3
+    client: better-sqlite3
     connection: ':memory:'
@@ -29,2 +40,4 @@ integrations:
     - host: github.com
+      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
+      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
       token: ${GITHUB_TOKEN}
@@ -56,46 +69,35 @@ auth:
 scaffolder:
-  github:
-    token: ${GITHUB_TOKEN}
-    visibility: public # or 'internal' or 'private'
+  # see https://backstage.io/docs/features/software-templates/configuration for software template options
 
 catalog:
+  import:
+    entityFilename: catalog-info.yaml
+    pullRequestBranchName: backstage-integration
   rules:
-    - allow: [Component, System, API, Group, User, Resource, Location]
+    - allow: [Component, System, API, Resource, Location]
   locations:
-    # Backstage example components
-    - type: url
-      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-components.yaml
-
-    # Backstage example systems
-    - type: url
-      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml
-
-    # Backstage example APIs
-    - type: url
-      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-apis.yaml
-
-    # Backstage example resources
-    - type: url
-      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-resources.yaml
+    # Local example data, file locations are relative to the backend process, typically `packages/backend`
+    - type: file
+      target: ../../examples/entities.yaml
 
-    # Backstage example organization groups
-    - type: url
-      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml
-
-    # Backstage example templates
-    - type: url
-      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
-      rules:
-        - allow: [Template]
-    - type: url
-      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/springboot-grpc-template/template.yaml
+    # Local example template
+    - type: file
+      target: ../../examples/template/template.yaml
       rules:
         - allow: [Template]
-    - type: url
-      target: https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml
-      rules:
-        - allow: [Template]
-    - type: url
-      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/docs-template/template.yaml
+
+    # Local example organizational data
+    - type: file
+      target: ../../examples/org.yaml
       rules:
-        - allow: [Template]
+        - allow: [User, Group]
+
+    ## Uncomment these lines to add more example data
+    # - type: url
+    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml
+
+    ## Uncomment these lines to add an example org
+    # - type: url
+    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
+    #   rules:
+    #     - allow: [User, Group]
diff --git a/backstage.json b/backstage.json
index fe2e6d5..b57f4b0 100644
--- a/backstage.json
+++ b/backstage.json
@@ -1,3 +1,3 @@
 {
-  "version": "0.4.4"
+  "version": "1.4.0-next.2"
 }
diff --git a/examples/entities.yaml b/examples/entities.yaml
new file mode 100644
index 0000000..447e8b1
--- /dev/null
+++ b/examples/entities.yaml
@@ -0,0 +1,41 @@
+---
+# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
+apiVersion: backstage.io/v1alpha1
+kind: System
+metadata:
+  name: examples
+spec:
+  owner: guests
+---
+# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
+apiVersion: backstage.io/v1alpha1
+kind: Component
+metadata:
+  name: example-website
+spec:
+  type: website
+  lifecycle: experimental
+  owner: guests
+  system: examples
+  providesApis: [example-grpc-api]
+---
+# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
+apiVersion: backstage.io/v1alpha1
+kind: API
+metadata:
+  name: example-grpc-api
+spec:
+  type: grpc
+  lifecycle: experimental
+  owner: guests
+  system: examples
+  definition: |
+    syntax = "proto3";
+
+    service Exampler {
+      rpc Example (ExampleMessage) returns (ExampleMessage) {};
+    }
+
+    message ExampleMessage {
+      string example = 1;
+    };
diff --git a/examples/org.yaml b/examples/org.yaml
new file mode 100644
index 0000000..a10e81f
--- /dev/null
+++ b/examples/org.yaml
@@ -0,0 +1,17 @@
+---
+# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-user
+apiVersion: backstage.io/v1alpha1
+kind: User
+metadata:
+  name: guest
+spec:
+  memberOf: [guests]
+---
+# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-group
+apiVersion: backstage.io/v1alpha1
+kind: Group
+metadata:
+  name: guests
+spec:
+  type: team
+  children: []
diff --git a/examples/template/content/catalog-info.yaml b/examples/template/content/catalog-info.yaml
new file mode 100644
index 0000000..d4ccca4
--- /dev/null
+++ b/examples/template/content/catalog-info.yaml
@@ -0,0 +1,8 @@
+apiVersion: backstage.io/v1alpha1
+kind: Component
+metadata:
+  name: ${{ values.name | dump }}
+spec:
+  type: service
+  owner: user:guest
+  lifecycle: experimental
diff --git a/examples/template/content/index.js b/examples/template/content/index.js
new file mode 100644
index 0000000..071ce5a
--- /dev/null
+++ b/examples/template/content/index.js
@@ -0,0 +1 @@
+console.log('Hello from ${{ values.name }}!');
diff --git a/examples/template/content/package.json b/examples/template/content/package.json
new file mode 100644
index 0000000..86f968a
--- /dev/null
+++ b/examples/template/content/package.json
@@ -0,0 +1,5 @@
+{
+  "name": "${{ values.name }}",
+  "private": true,
+  "dependencies": {}
+}
diff --git a/examples/template/template.yaml b/examples/template/template.yaml
new file mode 100644
index 0000000..50052b7
--- /dev/null
+++ b/examples/template/template.yaml
@@ -0,0 +1,74 @@
+apiVersion: scaffolder.backstage.io/v1beta3
+# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
+kind: Template
+metadata:
+  name: example-nodejs-template
+  title: Example Node.js Template
+  description: An example template for the scaffolder that creates a simple Node.js service
+spec:
+  owner: user:guest
+  type: service
+
+  # These parameters are used to generate the input form in the frontend, and are
+  # used to gather input data for the execution of the template.
+  parameters:
+    - title: Fill in some steps
+      required:
+        - name
+      properties:
+        name:
+          title: Name
+          type: string
+          description: Unique name of the component
+          ui:autofocus: true
+          ui:options:
+            rows: 5
+    - title: Choose a location
+      required:
+        - repoUrl
+      properties:
+        repoUrl:
+          title: Repository Location
+          type: string
+          ui:field: RepoUrlPicker
+          ui:options:
+            allowedHosts:
+              - github.com
+
+  # These steps are executed in the scaffolder backend, using data that we gathered
+  # via the parameters above.
+  steps:
+    # Each step executes an action, in this case one templates files into the working directory.
+    - id: fetch-base
+      name: Fetch Base
+      action: fetch:template
+      input:
+        url: ./content
+        values:
+          name: ${{ parameters.name }}
+
+    # This step publishes the contents of the working directory to GitHub.
+    - id: publish
+      name: Publish
+      action: publish:github
+      input:
+        allowedHosts: ['github.com']
+        description: This is ${{ parameters.name }}
+        repoUrl: ${{ parameters.repoUrl }}
+
+    # The final step is to register our new component in the catalog.
+    - id: register
+      name: Register
+      action: catalog:register
+      input:
+        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
+        catalogInfoPath: '/catalog-info.yaml'
+
+  # Outputs are displayed to the user after a successful execution of the template.
+  output:
+    links:
+      - title: Repository
+        url: ${{ steps.publish.output.remoteUrl }}
+      - title: Open in catalog
+        icon: catalog
+        entityRef: ${{ steps.register.output.entityRef }}
diff --git a/package.json b/package.json
index 655cd0b..33c780c 100644
--- a/package.json
+++ b/package.json
@@ -11,3 +11,3 @@
     "start-backend": "yarn workspace backend start",
-    "build": "lerna run build",
+    "build": "backstage-cli repo build --all",
     "build-image": "yarn workspace backend build-image",
@@ -19,4 +19,4 @@
     "test:all": "lerna run test -- --coverage",
-    "lint": "lerna run lint --since origin/master --",
-    "lint:all": "lerna run lint --",
+    "lint": "backstage-cli repo lint --since origin/master",
+    "lint:all": "backstage-cli repo lint",
     "prettier:check": "prettier --check .",
@@ -32,7 +32,13 @@
   "devDependencies": {
-    "@backstage/cli": "^0.9.0",
-    "@spotify/prettier-config": "^11.0.0",
+    "@backstage/cli": "^0.18.0-next.2",
+    "@spotify/prettier-config": "^12.0.0",
     "concurrently": "^6.0.0",
     "lerna": "^4.0.0",
-    "prettier": "^2.3.2"
+    "prettier": "^2.3.2",
+    "typescript": "~4.6.4",
+    "node-gyp": "^9.0.0"
+  },
+  "resolutions": {
+    "@types/react": "^17",
+    "@types/react-dom": "^17"
   },
@@ -40,3 +46,3 @@
   "lint-staged": {
-    "*.{js,jsx,ts,tsx}": [
+    "*.{js,jsx,ts,tsx,mjs,cjs}": [
       "eslint --fix",
diff --git a/packages/README.md b/packages/README.md
new file mode 100644
index 0000000..6327fa0
--- /dev/null
+++ b/packages/README.md
@@ -0,0 +1,9 @@
+# The Packages Folder
+
+This is where your own applications and centrally managed libraries live, each
+in a separate folder of its own.
+
+From the start there's an `app` folder (for the frontend) and a `backend` folder
+(for the Node backend), but you can also add more modules in here that house
+your core additions and adaptations, such as themes, common React component
+libraries, utilities, and similar.
diff --git a/packages/app/.eslintrc.js b/packages/app/.eslintrc.js
index 13573ef..e2a53a6 100644
--- a/packages/app/.eslintrc.js
+++ b/packages/app/.eslintrc.js
@@ -1,3 +1 @@
-module.exports = {
-  extends: [require.resolve('@backstage/cli/config/eslint')],
-};
+module.exports = require('@backstage/cli/config/eslint-factory')(__dirname);
diff --git a/packages/app/cypress.json b/packages/app/cypress.json
index 5de7ebf..0cb845a 100644
--- a/packages/app/cypress.json
+++ b/packages/app/cypress.json
@@ -3,3 +3,4 @@
   "fixturesFolder": false,
-  "pluginsFile": false
+  "pluginsFile": false,
+  "retries": 3
 }
diff --git a/packages/app/package.json b/packages/app/package.json
index 9bd4136..cdb736b 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -5,23 +5,31 @@
   "bundled": true,
+  "backstage": {
+    "role": "frontend"
+  },
   "dependencies": {
-    "@backstage/app-defaults": "^0.1.1",
-    "@backstage/catalog-model": "^0.9.7",
-    "@backstage/cli": "^0.9.0",
-    "@backstage/core-app-api": "^0.1.21",
-    "@backstage/core-components": "^0.7.4",
-    "@backstage/core-plugin-api": "^0.2.0",
-    "@backstage/integration-react": "^0.1.14",
-    "@backstage/plugin-api-docs": "^0.6.14",
-    "@backstage/plugin-catalog": "^0.7.3",
-    "@backstage/plugin-catalog-import": "^0.7.4",
-    "@backstage/plugin-catalog-react": "^0.6.4",
-    "@backstage/plugin-github-actions": "^0.4.24",
-    "@backstage/plugin-org": "^0.3.28",
-    "@backstage/plugin-scaffolder": "^0.11.11",
-    "@backstage/plugin-search": "^0.4.18",
-    "@backstage/plugin-tech-radar": "^0.4.12",
-    "@backstage/plugin-techdocs": "^0.12.6",
-    "@backstage/plugin-user-settings": "^0.3.11",
-    "@backstage/test-utils": "^0.1.22",
-    "@backstage/theme": "^0.2.13",
+    "@backstage/app-defaults": "^1.0.4-next.2",
+    "@backstage/catalog-model": "^1.1.0-next.2",
+    "@backstage/cli": "^0.18.0-next.2",
+    "@backstage/core-app-api": "^1.0.4-next.0",
+    "@backstage/core-components": "^0.10.0-next.2",
+    "@backstage/core-plugin-api": "^1.0.3",
+    "@backstage/integration-react": "^1.1.2-next.2",
+    "@backstage/plugin-api-docs": "^0.8.7-next.2",
+    "@backstage/plugin-catalog": "^1.4.0-next.2",
+    "@backstage/plugin-catalog-common": "^1.0.4-next.0",
+    "@backstage/plugin-catalog-graph": "^0.2.19-next.2",
+    "@backstage/plugin-catalog-import": "^0.8.10-next.2",
+    "@backstage/plugin-catalog-react": "^1.1.2-next.2",
+    "@backstage/plugin-github-actions": "^0.5.7-next.2",
+    "@backstage/plugin-org": "^0.5.7-next.2",
+    "@backstage/plugin-permission-react": "^0.4.3-next.0",
+    "@backstage/plugin-scaffolder": "^1.4.0-next.2",
+    "@backstage/plugin-search": "^0.9.1-next.2",
+    "@backstage/plugin-search-react": "^0.2.2-next.2",
+    "@backstage/plugin-tech-radar": "^0.5.14-next.2",
+    "@backstage/plugin-techdocs": "^1.2.1-next.2",
+    "@backstage/plugin-techdocs-react": "^1.0.2-next.1",
+    "@backstage/plugin-techdocs-module-addons-contrib": "^1.0.2-next.2",
+    "@backstage/plugin-user-settings": "^0.4.6-next.2",
+    "@backstage/theme": "^0.2.16-next.1",
     "@material-ui/core": "^4.12.2",
@@ -29,4 +37,4 @@
     "history": "^5.0.0",
-    "react": "^16.13.1",
-    "react-dom": "^16.13.1",
+    "react": "^17.0.2",
+    "react-dom": "^17.0.2",
     "react-router": "6.0.0-beta.0",
@@ -36,4 +44,5 @@
   "devDependencies": {
+    "@backstage/test-utils": "^1.1.2-next.1",
     "@testing-library/jest-dom": "^5.10.1",
-    "@testing-library/react": "^10.4.1",
+    "@testing-library/react": "^12.1.3",
     "@testing-library/user-event": "^12.0.7",
@@ -43,3 +52,3 @@
     "cross-env": "^7.0.0",
-    "cypress": "^7.3.0",
+    "cypress": "^9.7.0",
     "eslint-plugin-cypress": "^2.10.3",
@@ -48,7 +57,7 @@
   "scripts": {
-    "start": "backstage-cli app:serve",
-    "build": "backstage-cli app:build",
-    "test": "backstage-cli test",
-    "lint": "backstage-cli lint",
-    "clean": "backstage-cli clean",
+    "start": "backstage-cli package start",
+    "build": "backstage-cli package build",
+    "clean": "backstage-cli package clean",
+    "test": "backstage-cli package test",
+    "lint": "backstage-cli package lint",
     "test:e2e": "cross-env PORT=3001 start-server-and-test start http://localhost:3001 cy:dev",
@@ -56,3 +65,3 @@
     "cy:dev": "cypress open",
-    "cy:run": "cypress run"
+    "cy:run": "cypress run --browser chrome"
   },
diff --git a/packages/app/public/index.html b/packages/app/public/index.html
index b93896c..a936c73 100644
--- a/packages/app/public/index.html
+++ b/packages/app/public/index.html
@@ -44,13 +44,7 @@
     />
-    <style>
-      #root {
-        min-height: 100%;
-      }
-    </style>
-    <title><%= app.title %></title>
-    <% if (app.googleAnalyticsTrackingId && typeof app.googleAnalyticsTrackingId
-    === 'string') { %>
+    <title><%= config.getString('app.title') %></title>
+    <% if (config.has('app.googleAnalyticsTrackingId')) { %>
     <script
       async
-      src="https://www.googletagmanager.com/gtag/js?id=<%= app.googleAnalyticsTrackingId %>"
+      src="https://www.googletagmanager.com/gtag/js?id=<%= config.getString('app.googleAnalyticsTrackingId') %>"
     ></script>
@@ -63,3 +57,6 @@
 
-      gtag('config', '<%= app.googleAnalyticsTrackingId %>');
+      gtag(
+        'config',
+        '<%= config.getString("app.googleAnalyticsTrackingId") %>',
+      );
     </script>
@@ -67,3 +64,3 @@
   </head>
-  <body style="margin: 0">
+  <body>
     <noscript>You need to enable JavaScript to run this app.</noscript>
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index 82bc479..b94cac7 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -12,5 +12,5 @@ describe('App', () => {
             app: { title: 'Test' },
-            backend: { baseUrl: 'http://localhost:7000' },
+            backend: { baseUrl: 'http://localhost:7007' },
             techdocs: {
-              storageUrl: 'http://localhost:7000/api/techdocs/static/docs',
+              storageUrl: 'http://localhost:7007/api/techdocs/static/docs',
             },
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index 8a53583..c487726 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -13,2 +13,3 @@ import {
 import { ScaffolderPage, scaffolderPlugin } from '@backstage/plugin-scaffolder';
+import { orgPlugin } from '@backstage/plugin-org';
 import { SearchPage } from '@backstage/plugin-search';
@@ -16,3 +17,2 @@ import { TechRadarPage } from '@backstage/plugin-tech-radar';
 import {
-  DefaultTechDocsHome,
   TechDocsIndexPage,
@@ -21,2 +21,4 @@ import {
 } from '@backstage/plugin-techdocs';
+import { TechDocsAddons } from '@backstage/plugin-techdocs-react';
+import { ReportIssue } from '@backstage/plugin-techdocs-module-addons-contrib';
 import { UserSettingsPage } from '@backstage/plugin-user-settings';
@@ -30,2 +32,5 @@ import { createApp } from '@backstage/app-defaults';
 import { FlatRoutes } from '@backstage/core-app-api';
+import { CatalogGraphPage } from '@backstage/plugin-catalog-graph';
+import { PermissionedRoute } from '@backstage/plugin-permission-react';
+import { catalogEntityCreatePermission } from '@backstage/plugin-catalog-common/alpha';
 
@@ -39,3 +44,3 @@ const app = createApp({
     bind(apiDocsPlugin.externalRoutes, {
-      createComponent: scaffolderPlugin.routes.root,
+      registerApi: catalogImportPlugin.routes.importPage,
     });
@@ -44,2 +49,5 @@ const app = createApp({
     });
+    bind(orgPlugin.externalRoutes, {
+      catalogIndex: catalogPlugin.routes.catalogIndex,
+    });
   },
@@ -60,5 +68,3 @@ const routes = (
     </Route>
-    <Route path="/docs" element={<TechDocsIndexPage />}>
-      <DefaultTechDocsHome />
-    </Route>
+    <Route path="/docs" element={<TechDocsIndexPage />} />
     <Route
@@ -66,3 +72,7 @@ const routes = (
       element={<TechDocsReaderPage />}
-    />
+    >
+      <TechDocsAddons>
+        <ReportIssue />
+      </TechDocsAddons>
+    </Route>
     <Route path="/create" element={<ScaffolderPage />} />
@@ -73,3 +83,7 @@ const routes = (
     />
-    <Route path="/catalog-import" element={<CatalogImportPage />} />
+    <PermissionedRoute
+      path="/catalog-import"
+      permission={catalogEntityCreatePermission}
+      element={<CatalogImportPage />}
+    />
     <Route path="/search" element={<SearchPage />}>
@@ -78,2 +92,3 @@ const routes = (
     <Route path="/settings" element={<UserSettingsPage />} />
+    <Route path="/catalog-graph" element={<CatalogGraphPage />} />
   </FlatRoutes>
diff --git a/packages/app/src/components/Root/Root.tsx b/packages/app/src/components/Root/Root.tsx
index ec59b0b..b1164a3 100644
--- a/packages/app/src/components/Root/Root.tsx
+++ b/packages/app/src/components/Root/Root.tsx
@@ -16,3 +16,3 @@
 
-import React, { useContext, PropsWithChildren } from 'react';
+import React, { PropsWithChildren } from 'react';
 import { Link, makeStyles } from '@material-ui/core';
@@ -26,3 +26,6 @@ import LogoIcon from './LogoIcon';
 import { NavLink } from 'react-router-dom';
-import { Settings as SidebarSettings } from '@backstage/plugin-user-settings';
+import {
+  Settings as SidebarSettings,
+  UserSettingsSignInAvatar,
+} from '@backstage/plugin-user-settings';
 import { SidebarSearchModal } from '@backstage/plugin-search';
@@ -30,10 +33,13 @@ import {
   Sidebar,
-  SidebarPage,
   sidebarConfig,
-  SidebarContext,
-  SidebarItem,
   SidebarDivider,
-  SidebarSpace,
+  SidebarGroup,
+  SidebarItem,
+  SidebarPage,
   SidebarScrollWrapper,
+  SidebarSpace,
+  useSidebarOpenState,
 } from '@backstage/core-components';
+import MenuIcon from '@material-ui/icons/Menu';
+import SearchIcon from '@material-ui/icons/Search';
 
@@ -56,3 +62,3 @@ const SidebarLogo = () => {
   const classes = useSidebarLogoStyles();
-  const { isOpen } = useContext(SidebarContext);
+  const { isOpen } = useSidebarOpenState();
 
@@ -65,2 +71,3 @@ const SidebarLogo = () => {
         className={classes.link}
+        aria-label="Home"
       >
@@ -76,17 +83,27 @@ export const Root = ({ children }: PropsWithChildren<{}>) => (
       <SidebarLogo />
-      <SidebarSearchModal />
+      <SidebarGroup label="Search" icon={<SearchIcon />} to="/search">
+        <SidebarSearchModal />
+      </SidebarGroup>
       <SidebarDivider />
-      {/* Global nav, not org-specific */}
-      <SidebarItem icon={HomeIcon} to="catalog" text="Home" />
-      <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
-      <SidebarItem icon={LibraryBooks} to="docs" text="Docs" />
-      <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
-      {/* End global nav */}
-      <SidebarDivider />
-      <SidebarScrollWrapper>
-        <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
-      </SidebarScrollWrapper>
+      <SidebarGroup label="Menu" icon={<MenuIcon />}>
+        {/* Global nav, not org-specific */}
+        <SidebarItem icon={HomeIcon} to="catalog" text="Home" />
+        <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
+        <SidebarItem icon={LibraryBooks} to="docs" text="Docs" />
+        <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
+        {/* End global nav */}
+        <SidebarDivider />
+        <SidebarScrollWrapper>
+          <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
+        </SidebarScrollWrapper>
+      </SidebarGroup>
       <SidebarSpace />
       <SidebarDivider />
-      <SidebarSettings />
+      <SidebarGroup
+        label="Settings"
+        icon={<UserSettingsSignInAvatar />}
+        to="/settings"
+      >
+        <SidebarSettings />
+      </SidebarGroup>
     </Sidebar>
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index d3b4b78..6ec4da0 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -29,3 +29,2 @@ import {
   EntityDependsOnResourcesCard,
-  EntitySystemDiagramCard,
   EntityHasComponentsCard,
@@ -56,2 +55,27 @@ import { EntityTechdocsContent } from '@backstage/plugin-techdocs';
 import { EmptyState } from '@backstage/core-components';
+import {
+  Direction,
+  EntityCatalogGraphCard,
+} from '@backstage/plugin-catalog-graph';
+import {
+  RELATION_API_CONSUMED_BY,
+  RELATION_API_PROVIDED_BY,
+  RELATION_CONSUMES_API,
+  RELATION_DEPENDENCY_OF,
+  RELATION_DEPENDS_ON,
+  RELATION_HAS_PART,
+  RELATION_PART_OF,
+  RELATION_PROVIDES_API,
+} from '@backstage/catalog-model';
+
+import { TechDocsAddons } from '@backstage/plugin-techdocs-react';
+import { ReportIssue } from '@backstage/plugin-techdocs-module-addons-contrib';
+
+const techdocsContent = (
+  <EntityTechdocsContent>
+    <TechDocsAddons>
+      <ReportIssue />
+    </TechDocsAddons>
+  </EntityTechdocsContent>
+);
 
@@ -110,2 +134,6 @@ const overviewContent = (
     </Grid>
+    <Grid item md={6} xs={12}>
+      <EntityCatalogGraphCard variant="gridItem" height={400} />
+    </Grid>
+
     <Grid item md={4} xs={12}>
@@ -152,3 +180,3 @@ const serviceEntityPage = (
     <EntityLayout.Route path="/docs" title="Docs">
-      <EntityTechdocsContent />
+      {techdocsContent}
     </EntityLayout.Route>
@@ -179,3 +207,3 @@ const websiteEntityPage = (
     <EntityLayout.Route path="/docs" title="Docs">
-      <EntityTechdocsContent />
+      {techdocsContent}
     </EntityLayout.Route>
@@ -198,3 +226,3 @@ const defaultEntityPage = (
     <EntityLayout.Route path="/docs" title="Docs">
-      <EntityTechdocsContent />
+      {techdocsContent}
     </EntityLayout.Route>
@@ -225,2 +253,5 @@ const apiPage = (
         </Grid>
+        <Grid item md={6} xs={12}>
+          <EntityCatalogGraphCard variant="gridItem" height={400} />
+        </Grid>
         <Grid item md={4} xs={12}>
@@ -292,2 +323,5 @@ const systemPage = (
         </Grid>
+        <Grid item md={6} xs={12}>
+          <EntityCatalogGraphCard variant="gridItem" height={400} />
+        </Grid>
         <Grid item md={6}>
@@ -304,3 +338,19 @@ const systemPage = (
     <EntityLayout.Route path="/diagram" title="Diagram">
-      <EntitySystemDiagramCard />
+      <EntityCatalogGraphCard
+        variant="gridItem"
+        direction={Direction.TOP_BOTTOM}
+        title="System Diagram"
+        height={700}
+        relations={[
+          RELATION_PART_OF,
+          RELATION_HAS_PART,
+          RELATION_API_CONSUMED_BY,
+          RELATION_API_PROVIDED_BY,
+          RELATION_CONSUMES_API,
+          RELATION_PROVIDES_API,
+          RELATION_DEPENDENCY_OF,
+          RELATION_DEPENDS_ON,
+        ]}
+        unidirectional={false}
+      />
     </EntityLayout.Route>
@@ -317,2 +367,5 @@ const domainPage = (
         </Grid>
+        <Grid item md={6} xs={12}>
+          <EntityCatalogGraphCard variant="gridItem" height={400} />
+        </Grid>
         <Grid item md={6}>
diff --git a/packages/app/src/components/search/SearchPage.tsx b/packages/app/src/components/search/SearchPage.tsx
index 7b3c2b2..928b820 100644
--- a/packages/app/src/components/search/SearchPage.tsx
+++ b/packages/app/src/components/search/SearchPage.tsx
@@ -3,4 +3,12 @@ import { makeStyles, Theme, Grid, List, Paper } from '@material-ui/core';
 
-import { CatalogResultListItem } from '@backstage/plugin-catalog';
+import { CatalogSearchResultListItem } from '@backstage/plugin-catalog';
 import {
+  catalogApiRef,
+  CATALOG_FILTER_EXISTS,
+} from '@backstage/plugin-catalog-react';
+import { TechDocsSearchResultListItem } from '@backstage/plugin-techdocs';
+
+import { SearchType } from '@backstage/plugin-search';
+import {
+  DefaultResultListItem,
   SearchBar,
@@ -8,5 +16,12 @@ import {
   SearchResult,
-  DefaultResultListItem,
-} from '@backstage/plugin-search';
-import { Content, Header, Page } from '@backstage/core-components';
+  useSearch,
+} from '@backstage/plugin-search-react';
+import {
+  CatalogIcon,
+  Content,
+  DocsIcon,
+  Header,
+  Page,
+} from '@backstage/core-components';
+import { useApi } from '@backstage/core-plugin-api';
 
@@ -18,2 +33,3 @@ const useStyles = makeStyles((theme: Theme) => ({
     padding: theme.spacing(2),
+    marginTop: theme.spacing(2),
   },
@@ -28,2 +44,4 @@ const SearchPage = () => {
   const classes = useStyles();
+  const { types } = useSearch();
+  const catalogApi = useApi(catalogApiRef);
 
@@ -36,3 +54,3 @@ const SearchPage = () => {
             <Paper className={classes.bar}>
-              <SearchBar debounceTime={100} />
+              <SearchBar />
             </Paper>
@@ -40,5 +58,43 @@ const SearchPage = () => {
           <Grid item xs={3}>
+            <SearchType.Accordion
+              name="Result Type"
+              defaultValue="software-catalog"
+              types={[
+                {
+                  value: 'software-catalog',
+                  name: 'Software Catalog',
+                  icon: <CatalogIcon />,
+                },
+                {
+                  value: 'techdocs',
+                  name: 'Documentation',
+                  icon: <DocsIcon />,
+                },
+              ]}
+            />
             <Paper className={classes.filters}>
+              {types.includes('techdocs') && (
+                <SearchFilter.Select
+                  className={classes.filter}
+                  label="Entity"
+                  name="name"
+                  values={async () => {
+                    // Return a list of entities which are documented.
+                    const { items } = await catalogApi.getEntities({
+                      fields: ['metadata.name'],
+                      filter: {
+                        'metadata.annotations.backstage.io/techdocs-ref':
+                          CATALOG_FILTER_EXISTS,
+                      },
+                    });
+
+                    const names = items.map(entity => entity.metadata.name);
+                    names.sort();
+                    return names;
+                  }}
+                />
+              )}
               <SearchFilter.Select
                 className={classes.filter}
+                label="Kind"
                 name="kind"
@@ -48,2 +104,3 @@ const SearchPage = () => {
                 className={classes.filter}
+                label="Lifecycle"
                 name="lifecycle"
@@ -57,3 +114,3 @@ const SearchPage = () => {
                 <List>
-                  {results.map(({ type, document }) => {
+                  {results.map(({ type, document, highlight, rank }) => {
                     switch (type) {
@@ -61,5 +118,16 @@ const SearchPage = () => {
                         return (
-                          <CatalogResultListItem
+                          <CatalogSearchResultListItem
+                            key={document.location}
+                            result={document}
+                            highlight={highlight}
+                            rank={rank}
+                          />
+                        );
+                      case 'techdocs':
+                        return (
+                          <TechDocsSearchResultListItem
                             key={document.location}
                             result={document}
+                            highlight={highlight}
+                            rank={rank}
                           />
@@ -71,2 +139,4 @@ const SearchPage = () => {
                             result={document}
+                            highlight={highlight}
+                            rank={rank}
                           />
diff --git a/packages/backend/.eslintrc.js b/packages/backend/.eslintrc.js
index 16a033d..e2a53a6 100644
--- a/packages/backend/.eslintrc.js
+++ b/packages/backend/.eslintrc.js
@@ -1,3 +1 @@
-module.exports = {
-  extends: [require.resolve('@backstage/cli/config/eslint.backend')],
-};
+module.exports = require('@backstage/cli/config/eslint-factory')(__dirname);
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index 31231a3..a5773aa 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -11,3 +11,3 @@
 
-FROM node:14-buster-slim
+FROM node:16-bullseye-slim
 
@@ -15,2 +15,8 @@ WORKDIR /app
 
+# install sqlite3 dependencies, you can skip this if you don't use sqlite3 in the image
+RUN apt-get update && \
+    apt-get install -y --no-install-recommends libsqlite3-dev python3 build-essential && \
+    rm -rf /var/lib/apt/lists/* && \
+    yarn config set python /usr/bin/python3
+
 # Copy repo skeleton first, to avoid unnecessary docker cache invalidation.
@@ -24,5 +30,5 @@ RUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -
 # Then copy the rest of the backend bundle, along with any other files we might want.
-COPY packages/backend/dist/bundle.tar.gz app-config.yaml ./
+COPY packages/backend/dist/bundle.tar.gz app-config*.yaml ./
 RUN tar xzf bundle.tar.gz && rm bundle.tar.gz
 
-CMD ["node", "packages/backend", "--config", "app-config.yaml"]
+CMD ["node", "packages/backend", "--config", "app-config.yaml", "--config", "app-config.production.yaml"]
diff --git a/packages/backend/README.md b/packages/backend/README.md
index 81e0f80..02426ef 100644
--- a/packages/backend/README.md
+++ b/packages/backend/README.md
@@ -38,3 +38,3 @@ the backend without using the auth or sentry features.
 
-The backend starts up on port 7000 per default.
+The backend starts up on port 7007 per default.
 
diff --git a/packages/backend/package.json b/packages/backend/package.json
index b73e678..0d08960 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -6,27 +6,31 @@
   "private": true,
+  "backstage": {
+    "role": "backend"
+  },
   "scripts": {
-    "build": "backstage-cli backend:bundle",
-    "build-image": "docker build ../.. -f Dockerfile --tag backstage",
-    "start": "backstage-cli backend:dev",
-    "lint": "backstage-cli lint",
-    "test": "backstage-cli test",
-    "clean": "backstage-cli clean",
-    "migrate:create": "knex migrate:make -x ts"
+    "start": "backstage-cli package start",
+    "build": "backstage-cli package build",
+    "lint": "backstage-cli package lint",
+    "test": "backstage-cli package test",
+    "clean": "backstage-cli package clean",
+    "build-image": "docker build ../.. -f Dockerfile --tag backstage"
   },
   "dependencies": {
-    "app": "0.0.0",
-    "@backstage/backend-common": "^0.9.10",
-    "@backstage/catalog-model": "^0.9.7",
-    "@backstage/catalog-client": "^0.5.2",
-    "@backstage/config": "^0.1.11",
-    "@backstage/plugin-app-backend": "^0.3.19",
-    "@backstage/plugin-auth-backend": "^0.4.8",
-    "@backstage/plugin-catalog-backend": "^0.17.4",
-    "@backstage/plugin-proxy-backend": "^0.2.13",
-    "@backstage/plugin-scaffolder-backend": "^0.15.13",
-    "@backstage/plugin-search-backend": "^0.2.6",
-    "@backstage/plugin-search-backend-node": "^0.4.3",
-    "@backstage/plugin-techdocs-backend": "^0.10.8",
-    "@gitbeaker/node": "^30.2.0",
-    "@octokit/rest": "^18.5.3",
+    "app": "link:../app",
+    "@backstage/backend-common": "^0.14.1-next.2",
+    "@backstage/backend-tasks": "^0.3.3-next.2",
+    "@backstage/catalog-model": "^1.1.0-next.2",
+    "@backstage/catalog-client": "^1.0.4-next.1",
+    "@backstage/config": "^1.0.1",
+    "@backstage/plugin-app-backend": "^0.3.34-next.2",
+    "@backstage/plugin-auth-backend": "^0.15.0-next.2",
+    "@backstage/plugin-catalog-backend": "^1.2.1-next.2",
+    "@backstage/plugin-permission-common": "^0.6.3-next.0",
+    "@backstage/plugin-permission-node": "^0.6.3-next.1",
+    "@backstage/plugin-proxy-backend": "^0.2.28-next.0",
+    "@backstage/plugin-scaffolder-backend": "^1.4.0-next.2",
+    "@backstage/plugin-search-backend": "^0.5.4-next.1",
+    "@backstage/plugin-search-backend-module-pg": "^0.3.5-next.2",
+    "@backstage/plugin-search-backend-node": "^0.6.3-next.1",
+    "@backstage/plugin-techdocs-backend": "^1.2.0-next.2",
     "dockerode": "^3.3.1",
@@ -34,4 +38,3 @@
     "express-promise-router": "^4.1.0",
-    "knex": "^0.21.6",
-    "sqlite3": "^5.0.1",
+    "pg": "^8.3.0",
     "winston": "^3.2.1"
@@ -39,6 +42,8 @@
   "devDependencies": {
-    "@backstage/cli": "^0.9.0",
+    "@backstage/cli": "^0.18.0-next.2",
     "@types/dockerode": "^3.3.0",
+    "@types/express-serve-static-core": "^4.17.5",
     "@types/express": "^4.17.6",
-    "@types/express-serve-static-core": "^4.17.5"
+    "@types/luxon": "^2.0.4",
+    "better-sqlite3": "^7.5.0"
   },
diff --git a/packages/backend/src/index.ts b/packages/backend/src/index.ts
index f2b14b2..70bc66b 100644
--- a/packages/backend/src/index.ts
+++ b/packages/backend/src/index.ts
@@ -19,3 +19,5 @@ import {
   UrlReaders,
+  ServerTokenManager,
 } from '@backstage/backend-common';
+import { TaskScheduler } from '@backstage/backend-tasks';
 import { Config } from '@backstage/config';
@@ -29,2 +31,3 @@ import search from './plugins/search';
 import { PluginEnvironment } from './types';
+import { ServerPermissionClient } from '@backstage/plugin-permission-node';
 
@@ -34,7 +37,12 @@ function makeCreateEnv(config: Config) {
   const discovery = SingleHostDiscovery.fromConfig(config);
-
-  root.info(`Created UrlReader ${reader}`);
-
   const cacheManager = CacheManager.fromConfig(config);
   const databaseManager = DatabaseManager.fromConfig(config);
+  const tokenManager = ServerTokenManager.noop();
+  const taskScheduler = TaskScheduler.fromConfig(config);
+  const permissions = ServerPermissionClient.fromConfig(config, {
+    discovery,
+    tokenManager,
+  });
+
+  root.info(`Created UrlReader ${reader}`);
 
@@ -44,3 +52,14 @@ function makeCreateEnv(config: Config) {
     const cache = cacheManager.forPlugin(plugin);
-    return { logger, database, cache, config, reader, discovery };
+    const scheduler = taskScheduler.forPlugin(plugin);
+    return {
+      logger,
+      database,
+      cache,
+      config,
+      reader,
+      discovery,
+      tokenManager,
+      scheduler,
+      permissions,
+    };
   };
@@ -70,2 +89,4 @@ async function main() {
   apiRouter.use('/search', await search(searchEnv));
+
+  // Add backends ABOVE this line; this 404 handler is the catch-all fallback
   apiRouter.use(notFoundHandler());
diff --git a/packages/backend/src/plugins/app.ts b/packages/backend/src/plugins/app.ts
index 07fb04f..7c37f68 100644
--- a/packages/backend/src/plugins/app.ts
+++ b/packages/backend/src/plugins/app.ts
@@ -4,9 +4,9 @@ import { PluginEnvironment } from '../types';
 
-export default async function createPlugin({
-  logger,
-  config,
-}: PluginEnvironment): Promise<Router> {
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
   return await createRouter({
-    logger,
-    config,
+    logger: env.logger,
+    config: env.config,
+    database: env.database,
     appPackageName: 'app',
diff --git a/packages/backend/src/plugins/auth.ts b/packages/backend/src/plugins/auth.ts
index 5216510..159116d 100644
--- a/packages/backend/src/plugins/auth.ts
+++ b/packages/backend/src/plugins/auth.ts
@@ -1,2 +1,6 @@
-import { createRouter } from '@backstage/plugin-auth-backend';
+import {
+  createRouter,
+  providers,
+  defaultAuthProviderFactories,
+} from '@backstage/plugin-auth-backend';
 import { Router } from 'express';
@@ -4,9 +8,47 @@ import { PluginEnvironment } from '../types';
 
-export default async function createPlugin({
-  logger,
-  database,
-  config,
-  discovery,
-}: PluginEnvironment): Promise<Router> {
-  return await createRouter({ logger, config, database, discovery });
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
+  return await createRouter({
+    logger: env.logger,
+    config: env.config,
+    database: env.database,
+    discovery: env.discovery,
+    tokenManager: env.tokenManager,
+    providerFactories: {
+      ...defaultAuthProviderFactories,
+
+      // This replaces the default GitHub auth provider with a customized one.
+      // The `signIn` option enables sign-in for this provider, using the
+      // identity resolution logic that's provided in the `resolver` callback.
+      //
+      // This particular resolver makes all users share a single "guest" identity.
+      // It should only be used for testing and trying out Backstage.
+      //
+      // If you want to use a production ready resolver you can switch to the
+      // the one that is commented out below, it looks up a user entity in the
+      // catalog using the GitHub username of the authenticated user.
+      // That resolver requires you to have user entities populated in the catalog,
+      // for example using https://backstage.io/docs/integrations/github/org
+      //
+      // There are other resolvers to choose from, and you can also create
+      // your own, see the auth documentation for more details:
+      //
+      //   https://backstage.io/docs/auth/identity-resolver
+      github: providers.github.create({
+        signIn: {
+          resolver(_, ctx) {
+            const userRef = 'user:default/guest'; // Must be a full entity reference
+            return ctx.issueToken({
+              claims: {
+                sub: userRef, // The user's own identity
+                ent: [userRef], // A list of identities that the user claims ownership through
+              },
+            });
+          },
+          // resolver: providers.github.resolvers.usernameMatchingUserEntityName(),
+        },
+      }),
+    },
+  });
 }
diff --git a/packages/backend/src/plugins/proxy.ts b/packages/backend/src/plugins/proxy.ts
index 506f6d9..54ec393 100644
--- a/packages/backend/src/plugins/proxy.ts
+++ b/packages/backend/src/plugins/proxy.ts
@@ -4,8 +4,10 @@ import { PluginEnvironment } from '../types';
 
-export default async function createPlugin({
-  logger,
-  config,
-  discovery,
-}: PluginEnvironment): Promise<Router> {
-  return await createRouter({ logger, config, discovery });
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
+  return await createRouter({
+    logger: env.logger,
+    config: env.config,
+    discovery: env.discovery,
+  });
 }
diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
index 6be2e97..7ce5fcf 100644
--- a/packages/backend/src/plugins/scaffolder.ts
+++ b/packages/backend/src/plugins/scaffolder.ts
@@ -1,5 +1,3 @@
-import { DockerContainerRunner } from '@backstage/backend-common';
 import { CatalogClient } from '@backstage/catalog-client';
 import { createRouter } from '@backstage/plugin-scaffolder-backend';
-import Docker from 'dockerode';
 import { Router } from 'express';
@@ -7,20 +5,15 @@ import type { PluginEnvironment } from '../types';
 
-export default async function createPlugin({
-  logger,
-  config,
-  database,
-  reader,
-  discovery,
-}: PluginEnvironment): Promise<Router> {
-  const dockerClient = new Docker();
-  const containerRunner = new DockerContainerRunner({ dockerClient });
-  const catalogClient = new CatalogClient({ discoveryApi: discovery });
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
+  const catalogClient = new CatalogClient({
+    discoveryApi: env.discovery,
+  });
 
   return await createRouter({
-    containerRunner,
-    logger,
-    config,
-    database,
+    logger: env.logger,
+    config: env.config,
+    database: env.database,
+    reader: env.reader,
     catalogClient,
-    reader,
   });
diff --git a/packages/backend/src/plugins/search.ts b/packages/backend/src/plugins/search.ts
index 7fc317d..e9469dc 100644
--- a/packages/backend/src/plugins/search.ts
+++ b/packages/backend/src/plugins/search.ts
@@ -7,18 +7,44 @@ import {
 import { PluginEnvironment } from '../types';
-import { DefaultCatalogCollator } from '@backstage/plugin-catalog-backend';
+import { DefaultCatalogCollatorFactory } from '@backstage/plugin-catalog-backend';
+import { DefaultTechDocsCollatorFactory } from '@backstage/plugin-techdocs-backend';
+import { Router } from 'express';
 
-export default async function createPlugin({
-  logger,
-  discovery,
-  config,
-}: PluginEnvironment) {
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
   // Initialize a connection to a search engine.
-  const searchEngine = new LunrSearchEngine({ logger });
-  const indexBuilder = new IndexBuilder({ logger, searchEngine });
+  const searchEngine = new LunrSearchEngine({
+    logger: env.logger,
+  });
+  const indexBuilder = new IndexBuilder({
+    logger: env.logger,
+    searchEngine,
+  });
+
+  const schedule = env.scheduler.createScheduledTaskRunner({
+    frequency: { minutes: 10 },
+    timeout: { minutes: 15 },
+    // A 3 second delay gives the backend server a chance to initialize before
+    // any collators are executed, which may attempt requests against the API.
+    initialDelay: { seconds: 3 },
+  });
 
   // Collators are responsible for gathering documents known to plugins. This
-  // particular collator gathers entities from the software catalog.
+  // collator gathers entities from the software catalog.
+  indexBuilder.addCollator({
+    schedule,
+    factory: DefaultCatalogCollatorFactory.fromConfig(env.config, {
+      discovery: env.discovery,
+      tokenManager: env.tokenManager,
+    }),
+  });
+
+  // collator gathers entities from techdocs.
   indexBuilder.addCollator({
-    defaultRefreshIntervalSeconds: 600,
-    collator: DefaultCatalogCollator.fromConfig(config, { discovery }),
+    schedule,
+    factory: DefaultTechDocsCollatorFactory.fromConfig(env.config, {
+      discovery: env.discovery,
+      logger: env.logger,
+      tokenManager: env.tokenManager,
+    }),
   });
@@ -28,6 +54,4 @@ export default async function createPlugin({
   const { scheduler } = await indexBuilder.build();
+  scheduler.start();
 
-  // A 3 second delay gives the backend server a chance to initialize before
-  // any collators are executed, which may attempt requests against the API.
-  setTimeout(() => scheduler.start(), 3000);
   useHotCleanup(module, () => scheduler.stop());
@@ -36,3 +60,6 @@ export default async function createPlugin({
     engine: indexBuilder.getSearchEngine(),
-    logger,
+    types: indexBuilder.getDocumentTypes(),
+    permissions: env.permissions,
+    config: env.config,
+    logger: env.logger,
   });
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
index 906d86d..be8bb0c 100644
--- a/packages/backend/src/plugins/techdocs.ts
+++ b/packages/backend/src/plugins/techdocs.ts
@@ -11,12 +11,9 @@ import { PluginEnvironment } from '../types';
 
-export default async function createPlugin({
-  logger,
-  config,
-  discovery,
-  reader,
-}: PluginEnvironment): Promise<Router> {
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
   // Preparers are responsible for fetching source files for documentation.
-  const preparers = await Preparers.fromConfig(config, {
-    logger,
-    reader,
+  const preparers = await Preparers.fromConfig(env.config, {
+    logger: env.logger,
+    reader: env.reader,
   });
@@ -28,4 +25,4 @@ export default async function createPlugin({
   // Generators are used for generating documentation sites.
-  const generators = await Generators.fromConfig(config, {
-    logger,
+  const generators = await Generators.fromConfig(env.config, {
+    logger: env.logger,
     containerRunner,
@@ -36,5 +33,5 @@ export default async function createPlugin({
   // 2. Fetching files from storage and passing them to TechDocs frontend.
-  const publisher = await Publisher.fromConfig(config, {
-    logger,
-    discovery,
+  const publisher = await Publisher.fromConfig(env.config, {
+    logger: env.logger,
+    discovery: env.discovery,
   });
@@ -48,5 +45,6 @@ export default async function createPlugin({
     publisher,
-    logger,
-    config,
-    discovery,
+    logger: env.logger,
+    config: env.config,
+    discovery: env.discovery,
+    cache: env.cache,
   });
diff --git a/packages/backend/src/types.ts b/packages/backend/src/types.ts
index 6c78a2a..8e0a864 100644
--- a/packages/backend/src/types.ts
+++ b/packages/backend/src/types.ts
@@ -6,4 +6,7 @@ import {
   PluginEndpointDiscovery,
+  TokenManager,
   UrlReader,
 } from '@backstage/backend-common';
+import { PluginTaskScheduler } from '@backstage/backend-tasks';
+import { PermissionEvaluator } from '@backstage/plugin-permission-common';
 
@@ -16,2 +19,5 @@ export type PluginEnvironment = {
   discovery: PluginEndpointDiscovery;
+  tokenManager: TokenManager;
+  scheduler: PluginTaskScheduler;
+  permissions: PermissionEvaluator;
 };
diff --git a/plugins/README.md b/plugins/README.md
new file mode 100644
index 0000000..58dc32c
--- /dev/null
+++ b/plugins/README.md
@@ -0,0 +1,9 @@
+# The Plugins Folder
+
+This is where your own plugins and their associated modules live, each in a
+separate folder of its own.
+
+If you want to create a new plugin here, go to your project root directory, run
+the command `yarn backstage-cli create`, and follow the on-screen instructions.
+
+You can also check out existing plugins on [the plugin marketplace](https://backstage.io/plugins)!
