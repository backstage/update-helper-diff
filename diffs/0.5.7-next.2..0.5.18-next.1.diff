diff --git a/app-config.production.yaml b/app-config.production.yaml
index 8f0751c..5d426f5 100644
--- a/app-config.production.yaml
+++ b/app-config.production.yaml
@@ -15,3 +15,3 @@ backend:
 
-  # config options: https://node-postgres.com/api/client
+  # config options: https://node-postgres.com/apis/client
   database:
@@ -30,2 +30,6 @@ backend:
 
+auth:
+  providers:
+    guest: {}
+
 catalog:
@@ -34,2 +38,18 @@ catalog:
   # on how to get entities into the catalog.
-  locations: []
+  locations:
+    # Local example data, replace this with your production config, these are intended for demo use only.
+    # File locations are relative to the backend process, typically in a deployed context, such as in a Docker container, this will be the root
+    - type: file
+      target: ./examples/entities.yaml
+
+    # Local example template
+    - type: file
+      target: ./examples/template/template.yaml
+      rules:
+        - allow: [Template]
+
+    # Local example organizational data
+    - type: file
+      target: ./examples/org.yaml
+      rules:
+        - allow: [User, Group]
diff --git a/app-config.yaml b/app-config.yaml
index 08d2abf..f784d5b 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -38,3 +38,3 @@ integrations:
       # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
-      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
+      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
       token: ${GITHUB_TOKEN}
@@ -66,3 +66,5 @@ auth:
   # see https://backstage.io/docs/auth/ to learn about auth providers
-  providers: {}
+  providers:
+    # See https://backstage.io/docs/auth/guest/provider
+    guest: {}
 
@@ -103 +105,4 @@ catalog:
     #     - allow: [User, Group]
+
+kubernetes:
+  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options
diff --git a/backstage.json b/backstage.json
index 93b9fa0..da642d4 100644
--- a/backstage.json
+++ b/backstage.json
@@ -1,3 +1,3 @@
 {
-  "version": "1.20.0-next.2"
+  "version": "1.30.0-next.1"
 }
diff --git a/package.json b/package.json
index 2364da8..423e859 100644
--- a/package.json
+++ b/package.json
@@ -33,4 +33,4 @@
   "devDependencies": {
-    "@backstage/cli": "^0.24.0-next.1",
-    "@backstage/e2e-test-utils": "^0.1.0",
+    "@backstage/cli": "^0.27.0-next.1",
+    "@backstage/e2e-test-utils": "^0.1.1",
     "@playwright/test": "^1.32.3",
@@ -39,9 +39,9 @@
     "lerna": "^7.3.0",
-    "node-gyp": "^9.0.0",
+    "node-gyp": "^10.0.0",
     "prettier": "^2.3.2",
-    "typescript": "~5.2.0"
+    "typescript": "~5.4.0"
   },
   "resolutions": {
-    "@types/react": "^17",
-    "@types/react-dom": "^17"
+    "@types/react": "^18",
+    "@types/react-dom": "^18"
   },
diff --git a/packages/app/e2e-tests/app.test.ts b/packages/app/e2e-tests/app.test.ts
index d45bc0d..839ff88 100644
--- a/packages/app/e2e-tests/app.test.ts
+++ b/packages/app/e2e-tests/app.test.ts
@@ -21,2 +21,6 @@ test('App should render the welcome page', async ({ page }) => {
 
+  const enterButton = page.getByRole('button', { name: 'Enter' });
+  await expect(enterButton).toBeVisible();
+  await enterButton.click();
+
   await expect(page.getByText('My Company Catalog')).toBeVisible();
diff --git a/packages/app/package.json b/packages/app/package.json
index aab8d53..cbf4ea3 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -16,27 +16,26 @@
   "dependencies": {
-    "@backstage/app-defaults": "^1.4.5-next.2",
-    "@backstage/catalog-model": "^1.4.3",
-    "@backstage/cli": "^0.24.0-next.1",
-    "@backstage/core-app-api": "^1.11.1-next.0",
-    "@backstage/core-components": "^0.13.8-next.2",
-    "@backstage/core-plugin-api": "^1.8.0-next.0",
-    "@backstage/integration-react": "^1.1.21-next.1",
-    "@backstage/plugin-api-docs": "^0.10.0-next.2",
-    "@backstage/plugin-catalog": "^1.15.0-next.2",
-    "@backstage/plugin-catalog-common": "^1.0.17",
-    "@backstage/plugin-catalog-graph": "^0.2.38-next.2",
-    "@backstage/plugin-catalog-import": "^0.10.2-next.2",
-    "@backstage/plugin-catalog-react": "^1.9.0-next.2",
-    "@backstage/plugin-github-actions": "^0.6.7-next.2",
-    "@backstage/plugin-org": "^0.6.16-next.2",
-    "@backstage/plugin-permission-react": "^0.4.17-next.0",
-    "@backstage/plugin-scaffolder": "^1.16.0-next.2",
-    "@backstage/plugin-search": "^1.4.2-next.2",
-    "@backstage/plugin-search-react": "^1.7.2-next.2",
-    "@backstage/plugin-tech-radar": "^0.6.10-next.2",
-    "@backstage/plugin-techdocs": "^1.9.0-next.2",
-    "@backstage/plugin-techdocs-module-addons-contrib": "^1.1.2-next.2",
-    "@backstage/plugin-techdocs-react": "^1.1.13-next.2",
-    "@backstage/plugin-user-settings": "^0.7.12-next.2",
-    "@backstage/theme": "^0.4.4-next.0",
+    "@backstage/app-defaults": "^1.5.10-next.1",
+    "@backstage/catalog-model": "^1.5.0",
+    "@backstage/cli": "^0.27.0-next.1",
+    "@backstage/core-app-api": "^1.14.2-next.0",
+    "@backstage/core-components": "^0.14.10-next.0",
+    "@backstage/core-plugin-api": "^1.9.3",
+    "@backstage/integration-react": "^1.1.30-next.0",
+    "@backstage/plugin-api-docs": "^0.11.8-next.1",
+    "@backstage/plugin-catalog": "^1.21.2-next.1",
+    "@backstage/plugin-catalog-common": "^1.0.26-next.0",
+    "@backstage/plugin-catalog-graph": "^0.4.8-next.1",
+    "@backstage/plugin-catalog-import": "^0.12.2-next.1",
+    "@backstage/plugin-catalog-react": "^1.12.3-next.1",
+    "@backstage/plugin-kubernetes": "^0.11.13-next.1",
+    "@backstage/plugin-org": "^0.6.28-next.1",
+    "@backstage/plugin-permission-react": "^0.4.25-next.0",
+    "@backstage/plugin-scaffolder": "^1.23.1-next.1",
+    "@backstage/plugin-search": "^1.4.15-next.1",
+    "@backstage/plugin-search-react": "^1.7.14-next.1",
+    "@backstage/plugin-techdocs": "^1.10.8-next.1",
+    "@backstage/plugin-techdocs-module-addons-contrib": "^1.1.13-next.0",
+    "@backstage/plugin-techdocs-react": "^1.2.7-next.0",
+    "@backstage/plugin-user-settings": "^0.8.11-next.1",
+    "@backstage/theme": "^0.5.6",
     "@material-ui/core": "^4.12.2",
@@ -44,4 +43,4 @@
     "history": "^5.0.0",
-    "react": "^17.0.2",
-    "react-dom": "^17.0.2",
+    "react": "^18.0.2",
+    "react-dom": "^18.0.2",
     "react-router": "^6.3.0",
@@ -51,8 +50,8 @@
   "devDependencies": {
-    "@backstage/test-utils": "^1.4.5-next.0",
+    "@backstage/test-utils": "^1.5.10-next.1",
     "@playwright/test": "^1.32.3",
-    "@testing-library/jest-dom": "^5.10.1",
-    "@testing-library/react": "^12.1.3",
+    "@testing-library/jest-dom": "^6.0.0",
+    "@testing-library/react": "^14.0.0",
     "@testing-library/user-event": "^14.0.0",
-    "@testing-library/dom": "^8.0.0",
+    "@testing-library/dom": "^9.0.0",
     "@types/react-dom": "*",
diff --git a/packages/app/public/index.html b/packages/app/public/index.html
index fc758ee..18da7c4 100644
--- a/packages/app/public/index.html
+++ b/packages/app/public/index.html
@@ -8,3 +8,3 @@
       name="description"
-      content="Backstage is an open platform for building developer portals"
+      content="Backstage is an open source framework for building developer portals"
     />
@@ -43,3 +43,3 @@
     />
-    <title><%= config.getString('app.title') %></title>
+    <title><%= config.getOptionalString('app.title') ?? 'Backstage' %></title>
   </head>
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index b94cac7..ec8ba1d 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -1,3 +1,3 @@
 import React from 'react';
-import { renderWithEffects } from '@backstage/test-utils';
+import { render, waitFor } from '@testing-library/react';
 import App from './App';
@@ -22,4 +22,7 @@ describe('App', () => {
 
-    const rendered = await renderWithEffects(<App />);
-    expect(rendered.baseElement).toBeInTheDocument();
+    const rendered = render(<App />);
+
+    await waitFor(() => {
+      expect(rendered.baseElement).toBeInTheDocument();
+    });
   });
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index 8d62f29..e24c468 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -15,3 +15,2 @@ import { orgPlugin } from '@backstage/plugin-org';
 import { SearchPage } from '@backstage/plugin-search';
-import { TechRadarPage } from '@backstage/plugin-tech-radar';
 import {
@@ -29,3 +28,7 @@ import { Root } from './components/Root';
 
-import { AlertDisplay, OAuthRequestDialog } from '@backstage/core-components';
+import {
+  AlertDisplay,
+  OAuthRequestDialog,
+  SignInPage,
+} from '@backstage/core-components';
 import { createApp } from '@backstage/app-defaults';
@@ -55,2 +58,5 @@ const app = createApp({
   },
+  components: {
+    SignInPage: props => <SignInPage {...props} auto providers={['guest']} />,
+  },
 });
@@ -78,6 +84,2 @@ const routes = (
     <Route path="/api-docs" element={<ApiExplorerPage />} />
-    <Route
-      path="/tech-radar"
-      element={<TechRadarPage width={1500} height={800} />}
-    />
     <Route
diff --git a/packages/app/src/components/Root/Root.tsx b/packages/app/src/components/Root/Root.tsx
index 6768b48..853d175 100644
--- a/packages/app/src/components/Root/Root.tsx
+++ b/packages/app/src/components/Root/Root.tsx
@@ -4,3 +4,2 @@ import HomeIcon from '@material-ui/icons/Home';
 import ExtensionIcon from '@material-ui/icons/Extension';
-import MapIcon from '@material-ui/icons/MyLocation';
 import LibraryBooks from '@material-ui/icons/LibraryBooks';
@@ -28,2 +27,4 @@ import MenuIcon from '@material-ui/icons/Menu';
 import SearchIcon from '@material-ui/icons/Search';
+import { MyGroupsSidebarItem } from '@backstage/plugin-org';
+import GroupIcon from '@material-ui/icons/People';
 
@@ -68,2 +69,7 @@ export const Root = ({ children }: PropsWithChildren<{}>) => (
         <SidebarItem icon={HomeIcon} to="catalog" text="Home" />
+        <MyGroupsSidebarItem
+          singularTitle="My Group"
+          pluralTitle="My Groups"
+          icon={GroupIcon}
+        />
         <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
@@ -74,3 +80,3 @@ export const Root = ({ children }: PropsWithChildren<{}>) => (
         <SidebarScrollWrapper>
-          <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
+          {/* Items in this group will be scrollable if they run out of space */}
         </SidebarScrollWrapper>
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index 6722ea2..6164c76 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -30,6 +30,2 @@ import {
 } from '@backstage/plugin-catalog';
-import {
-  isGithubActionsAvailable,
-  EntityGithubActionsContent,
-} from '@backstage/plugin-github-actions';
 import {
@@ -60,2 +56,7 @@ import { ReportIssue } from '@backstage/plugin-techdocs-module-addons-contrib';
 
+import {
+  EntityKubernetesContent,
+  isKubernetesAvailable,
+} from '@backstage/plugin-kubernetes';
+
 const techdocsContent = (
@@ -72,5 +73,9 @@ const cicdContent = (
   <EntitySwitch>
-    <EntitySwitch.Case if={isGithubActionsAvailable}>
-      <EntityGithubActionsContent />
-    </EntitySwitch.Case>
+    {/*
+      Here you can add support for different CI/CD services, for example
+      using @backstage-community/plugin-github-actions as follows:
+      <EntitySwitch.Case if={isGithubActionsAvailable}>
+        <EntityGithubActionsContent />
+      </EntitySwitch.Case>
+     */}
 
@@ -152,2 +157,10 @@ const serviceEntityPage = (
 
+    <EntityLayout.Route
+      path="/kubernetes"
+      title="Kubernetes"
+      if={isKubernetesAvailable}
+    >
+      <EntityKubernetesContent />
+    </EntityLayout.Route>
+
     <EntityLayout.Route path="/api" title="API">
@@ -190,2 +203,10 @@ const websiteEntityPage = (
 
+    <EntityLayout.Route
+      path="/kubernetes"
+      title="Kubernetes"
+      if={isKubernetesAvailable}
+    >
+      <EntityKubernetesContent />
+    </EntityLayout.Route>
+
     <EntityLayout.Route path="/dependencies" title="Dependencies">
@@ -302,5 +323,8 @@ const groupPage = (
         </Grid>
-        <Grid item xs={12}>
+        <Grid item xs={12} md={6}>
           <EntityMembersListCard />
         </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityLinksCard />
+        </Grid>
       </Grid>
diff --git a/packages/app/src/index.tsx b/packages/app/src/index.tsx
index b16aaf7..d875c77 100644
--- a/packages/app/src/index.tsx
+++ b/packages/app/src/index.tsx
@@ -2,5 +2,5 @@ import '@backstage/cli/asset-types';
 import React from 'react';
-import ReactDOM from 'react-dom';
+import ReactDOM from 'react-dom/client';
 import App from './App';
 
-ReactDOM.render(<App />, document.getElementById('root'));
+ReactDOM.createRoot(document.getElementById('root')!).render(<App />);
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index 18548e9..bef67b5 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -47,2 +47,5 @@ RUN --mount=type=cache,target=/home/node/.cache/yarn,sharing=locked,uid=1000,gid
 
+# This will include the examples, if you don't need these simply remove this line
+COPY --chown=node:node examples ./examples
+
 # Then copy the rest of the backend bundle, along with any other files we might want.
diff --git a/packages/backend/package.json b/packages/backend/package.json
index 2131355..c5c3b5b 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -18,28 +18,30 @@
   "dependencies": {
-    "@backstage/backend-common": "^0.19.9-next.2",
-    "@backstage/backend-tasks": "^0.5.12-next.2",
-    "@backstage/catalog-client": "^1.4.5",
-    "@backstage/catalog-model": "^1.4.3",
-    "@backstage/config": "^1.1.1",
-    "@backstage/plugin-app-backend": "^0.3.55-next.2",
-    "@backstage/plugin-auth-backend": "^0.20.0-next.2",
-    "@backstage/plugin-auth-node": "^0.4.1-next.2",
-    "@backstage/plugin-catalog-backend": "^1.15.0-next.2",
-    "@backstage/plugin-catalog-backend-module-scaffolder-entity-model": "^0.1.4-next.2",
-    "@backstage/plugin-permission-common": "^0.7.9",
-    "@backstage/plugin-permission-node": "^0.7.18-next.2",
-    "@backstage/plugin-proxy-backend": "^0.4.5-next.2",
-    "@backstage/plugin-scaffolder-backend": "^1.19.0-next.2",
-    "@backstage/plugin-search-backend": "^1.4.7-next.2",
-    "@backstage/plugin-search-backend-module-catalog": "^0.1.11-next.2",
-    "@backstage/plugin-search-backend-module-pg": "^0.5.16-next.2",
-    "@backstage/plugin-search-backend-module-techdocs": "^0.1.11-next.2",
-    "@backstage/plugin-search-backend-node": "^1.2.11-next.2",
-    "@backstage/plugin-techdocs-backend": "^1.9.0-next.2",
+    "@backstage/backend-common": "^0.23.4-next.1",
+    "@backstage/backend-defaults": "^0.4.2-next.1",
+    "@backstage/backend-tasks": "^0.5.28-next.1",
+    "@backstage/config": "^1.2.0",
+    "@backstage/plugin-app-backend": "^0.3.72-next.1",
+    "@backstage/plugin-auth-backend": "^0.22.10-next.1",
+    "@backstage/plugin-auth-backend-module-github-provider": "^0.1.20-next.1",
+    "@backstage/plugin-auth-backend-module-guest-provider": "^0.1.9-next.1",
+    "@backstage/plugin-auth-node": "^0.4.18-next.1",
+    "@backstage/plugin-catalog-backend": "^1.24.1-next.1",
+    "@backstage/plugin-catalog-backend-module-logs": "^0.0.2-next.1",
+    "@backstage/plugin-catalog-backend-module-scaffolder-entity-model": "^0.1.21-next.1",
+    "@backstage/plugin-kubernetes-backend": "^0.18.4-next.1",
+    "@backstage/plugin-permission-backend": "^0.5.47-next.1",
+    "@backstage/plugin-permission-backend-module-allow-all-policy": "^0.1.20-next.1",
+    "@backstage/plugin-permission-common": "^0.8.1-next.0",
+    "@backstage/plugin-permission-node": "^0.8.1-next.1",
+    "@backstage/plugin-proxy-backend": "^0.5.4-next.1",
+    "@backstage/plugin-scaffolder-backend": "^1.23.1-next.1",
+    "@backstage/plugin-search-backend": "^1.5.15-next.1",
+    "@backstage/plugin-search-backend-module-catalog": "^0.1.29-next.1",
+    "@backstage/plugin-search-backend-module-pg": "^0.5.33-next.1",
+    "@backstage/plugin-search-backend-module-techdocs": "^0.1.28-next.1",
+    "@backstage/plugin-search-backend-node": "^1.2.28-next.1",
+    "@backstage/plugin-techdocs-backend": "^1.10.10-next.1",
     "app": "link:../app",
     "better-sqlite3": "^9.0.0",
-    "dockerode": "^3.3.1",
-    "express": "^4.17.1",
-    "express-promise-router": "^4.1.0",
-    "node-gyp": "^9.0.0",
+    "node-gyp": "^10.0.0",
     "pg": "^8.11.3",
@@ -48,4 +50,3 @@
   "devDependencies": {
-    "@backstage/cli": "^0.24.0-next.1",
-    "@types/dockerode": "^3.3.0",
+    "@backstage/cli": "^0.27.0-next.1",
     "@types/express": "^4.17.6",
diff --git a/packages/backend/src/index.test.ts b/packages/backend/src/index.test.ts
deleted file mode 100644
index 7814b8c..0000000
--- a/packages/backend/src/index.test.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { PluginEnvironment } from './types';
-
-describe('test', () => {
-  it('unbreaks the test runner', () => {
-    const unbreaker = {} as PluginEnvironment;
-    expect(unbreaker).toBeTruthy();
-  });
-});
diff --git a/packages/backend/src/index.ts b/packages/backend/src/index.ts
index 04c4ff9..cf2caae 100644
--- a/packages/backend/src/index.ts
+++ b/packages/backend/src/index.ts
@@ -8,108 +8,46 @@
 
-import Router from 'express-promise-router';
-import {
-  createServiceBuilder,
-  loadBackendConfig,
-  getRootLogger,
-  useHotMemoize,
-  notFoundHandler,
-  CacheManager,
-  DatabaseManager,
-  HostDiscovery,
-  UrlReaders,
-  ServerTokenManager,
-} from '@backstage/backend-common';
-import { TaskScheduler } from '@backstage/backend-tasks';
-import { Config } from '@backstage/config';
-import app from './plugins/app';
-import auth from './plugins/auth';
-import catalog from './plugins/catalog';
-import scaffolder from './plugins/scaffolder';
-import proxy from './plugins/proxy';
-import techdocs from './plugins/techdocs';
-import search from './plugins/search';
-import { PluginEnvironment } from './types';
-import { ServerPermissionClient } from '@backstage/plugin-permission-node';
-import { DefaultIdentityClient } from '@backstage/plugin-auth-node';
+import { createBackend } from '@backstage/backend-defaults';
 
-function makeCreateEnv(config: Config) {
-  const root = getRootLogger();
-  const reader = UrlReaders.default({ logger: root, config });
-  const discovery = HostDiscovery.fromConfig(config);
-  const cacheManager = CacheManager.fromConfig(config);
-  const databaseManager = DatabaseManager.fromConfig(config, { logger: root });
-  const tokenManager = ServerTokenManager.noop();
-  const taskScheduler = TaskScheduler.fromConfig(config, { databaseManager });
+const backend = createBackend();
 
-  const identity = DefaultIdentityClient.create({
-    discovery,
-  });
-  const permissions = ServerPermissionClient.fromConfig(config, {
-    discovery,
-    tokenManager,
-  });
+backend.add(import('@backstage/plugin-app-backend/alpha'));
+backend.add(import('@backstage/plugin-proxy-backend/alpha'));
+backend.add(import('@backstage/plugin-scaffolder-backend/alpha'));
+backend.add(import('@backstage/plugin-techdocs-backend/alpha'));
 
-  root.info(`Created UrlReader ${reader}`);
+// auth plugin
+backend.add(import('@backstage/plugin-auth-backend'));
+// See https://backstage.io/docs/backend-system/building-backends/migrating#the-auth-plugin
+backend.add(import('@backstage/plugin-auth-backend-module-guest-provider'));
+// See https://backstage.io/docs/auth/guest/provider
 
-  return (plugin: string): PluginEnvironment => {
-    const logger = root.child({ type: 'plugin', plugin });
-    const database = databaseManager.forPlugin(plugin);
-    const cache = cacheManager.forPlugin(plugin);
-    const scheduler = taskScheduler.forPlugin(plugin);
-    return {
-      logger,
-      database,
-      cache,
-      config,
-      reader,
-      discovery,
-      tokenManager,
-      scheduler,
-      permissions,
-      identity,
-    };
-  };
-}
+// catalog plugin
+backend.add(import('@backstage/plugin-catalog-backend/alpha'));
+backend.add(
+  import('@backstage/plugin-catalog-backend-module-scaffolder-entity-model'),
+);
 
-async function main() {
-  const config = await loadBackendConfig({
-    argv: process.argv,
-    logger: getRootLogger(),
-  });
-  const createEnv = makeCreateEnv(config);
+// See https://backstage.io/docs/features/software-catalog/configuration#subscribing-to-catalog-errors
+backend.add(import('@backstage/plugin-catalog-backend-module-logs'));
 
-  const catalogEnv = useHotMemoize(module, () => createEnv('catalog'));
-  const scaffolderEnv = useHotMemoize(module, () => createEnv('scaffolder'));
-  const authEnv = useHotMemoize(module, () => createEnv('auth'));
-  const proxyEnv = useHotMemoize(module, () => createEnv('proxy'));
-  const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));
-  const searchEnv = useHotMemoize(module, () => createEnv('search'));
-  const appEnv = useHotMemoize(module, () => createEnv('app'));
+// permission plugin
+backend.add(import('@backstage/plugin-permission-backend/alpha'));
+backend.add(
+  import('@backstage/plugin-permission-backend-module-allow-all-policy'),
+);
 
-  const apiRouter = Router();
-  apiRouter.use('/catalog', await catalog(catalogEnv));
-  apiRouter.use('/scaffolder', await scaffolder(scaffolderEnv));
-  apiRouter.use('/auth', await auth(authEnv));
-  apiRouter.use('/techdocs', await techdocs(techdocsEnv));
-  apiRouter.use('/proxy', await proxy(proxyEnv));
-  apiRouter.use('/search', await search(searchEnv));
+// search plugin
+backend.add(import('@backstage/plugin-search-backend/alpha'));
 
-  // Add backends ABOVE this line; this 404 handler is the catch-all fallback
-  apiRouter.use(notFoundHandler());
+// search engine
+// See https://backstage.io/docs/features/search/search-engines
+backend.add(import('@backstage/plugin-search-backend-module-pg/alpha'));
 
-  const service = createServiceBuilder(module)
-    .loadConfig(config)
-    .addRouter('/api', apiRouter)
-    .addRouter('', await app(appEnv));
+// search collators
+backend.add(import('@backstage/plugin-search-backend-module-catalog/alpha'));
+backend.add(import('@backstage/plugin-search-backend-module-techdocs/alpha'));
 
-  await service.start().catch(err => {
-    console.log(err);
-    process.exit(1);
-  });
-}
+// kubernetes
+backend.add(import('@backstage/plugin-kubernetes-backend/alpha'));
 
-module.hot?.accept();
-main().catch(error => {
-  console.error('Backend failed to start up', error);
-  process.exit(1);
-});
+backend.start();
diff --git a/packages/backend/src/plugins/app.ts b/packages/backend/src/plugins/app.ts
deleted file mode 100644
index 7c37f68..0000000
--- a/packages/backend/src/plugins/app.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { createRouter } from '@backstage/plugin-app-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    database: env.database,
-    appPackageName: 'app',
-  });
-}
diff --git a/packages/backend/src/plugins/auth.ts b/packages/backend/src/plugins/auth.ts
deleted file mode 100644
index 77eb6aa..0000000
--- a/packages/backend/src/plugins/auth.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-import {
-  createRouter,
-  providers,
-  defaultAuthProviderFactories,
-} from '@backstage/plugin-auth-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    database: env.database,
-    discovery: env.discovery,
-    tokenManager: env.tokenManager,
-    providerFactories: {
-      ...defaultAuthProviderFactories,
-
-      // This replaces the default GitHub auth provider with a customized one.
-      // The `signIn` option enables sign-in for this provider, using the
-      // identity resolution logic that's provided in the `resolver` callback.
-      //
-      // This particular resolver makes all users share a single "guest" identity.
-      // It should only be used for testing and trying out Backstage.
-      //
-      // If you want to use a production ready resolver you can switch to
-      // the one that is commented out below, it looks up a user entity in the
-      // catalog using the GitHub username of the authenticated user.
-      // That resolver requires you to have user entities populated in the catalog,
-      // for example using https://backstage.io/docs/integrations/github/org
-      //
-      // There are other resolvers to choose from, and you can also create
-      // your own, see the auth documentation for more details:
-      //
-      //   https://backstage.io/docs/auth/identity-resolver
-      github: providers.github.create({
-        signIn: {
-          resolver(_, ctx) {
-            const userRef = 'user:default/guest'; // Must be a full entity reference
-            return ctx.issueToken({
-              claims: {
-                sub: userRef, // The user's own identity
-                ent: [userRef], // A list of identities that the user claims ownership through
-              },
-            });
-          },
-          // resolver: providers.github.resolvers.usernameMatchingUserEntityName(),
-        },
-      }),
-    },
-  });
-}
diff --git a/packages/backend/src/plugins/catalog.ts b/packages/backend/src/plugins/catalog.ts
deleted file mode 100644
index 4decdca..0000000
--- a/packages/backend/src/plugins/catalog.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { CatalogBuilder } from '@backstage/plugin-catalog-backend';
-import { ScaffolderEntitiesProcessor } from '@backstage/plugin-catalog-backend-module-scaffolder-entity-model';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  const builder = await CatalogBuilder.create(env);
-  builder.addProcessor(new ScaffolderEntitiesProcessor());
-  const { processingEngine, router } = await builder.build();
-  await processingEngine.start();
-  return router;
-}
diff --git a/packages/backend/src/plugins/proxy.ts b/packages/backend/src/plugins/proxy.ts
deleted file mode 100644
index 54ec393..0000000
--- a/packages/backend/src/plugins/proxy.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { createRouter } from '@backstage/plugin-proxy-backend';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    discovery: env.discovery,
-  });
-}
diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
deleted file mode 100644
index a12fee2..0000000
--- a/packages/backend/src/plugins/scaffolder.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-import { CatalogClient } from '@backstage/catalog-client';
-import { createRouter } from '@backstage/plugin-scaffolder-backend';
-import { Router } from 'express';
-import type { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  const catalogClient = new CatalogClient({
-    discoveryApi: env.discovery,
-  });
-
-  return await createRouter({
-    logger: env.logger,
-    config: env.config,
-    database: env.database,
-    reader: env.reader,
-    catalogClient,
-    identity: env.identity,
-    permissions: env.permissions,
-  });
-}
diff --git a/packages/backend/src/plugins/search.ts b/packages/backend/src/plugins/search.ts
deleted file mode 100644
index 467ac60..0000000
--- a/packages/backend/src/plugins/search.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-import { useHotCleanup } from '@backstage/backend-common';
-import { createRouter } from '@backstage/plugin-search-backend';
-import {
-  IndexBuilder,
-  LunrSearchEngine,
-} from '@backstage/plugin-search-backend-node';
-import { PluginEnvironment } from '../types';
-import { DefaultCatalogCollatorFactory } from '@backstage/plugin-search-backend-module-catalog';
-import { DefaultTechDocsCollatorFactory } from '@backstage/plugin-search-backend-module-techdocs';
-import { Router } from 'express';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  // Initialize a connection to a search engine.
-  const searchEngine = new LunrSearchEngine({
-    logger: env.logger,
-  });
-  const indexBuilder = new IndexBuilder({
-    logger: env.logger,
-    searchEngine,
-  });
-
-  const schedule = env.scheduler.createScheduledTaskRunner({
-    frequency: { minutes: 10 },
-    timeout: { minutes: 15 },
-    // A 3 second delay gives the backend server a chance to initialize before
-    // any collators are executed, which may attempt requests against the API.
-    initialDelay: { seconds: 3 },
-  });
-
-  // Collators are responsible for gathering documents known to plugins. This
-  // collator gathers entities from the software catalog.
-  indexBuilder.addCollator({
-    schedule,
-    factory: DefaultCatalogCollatorFactory.fromConfig(env.config, {
-      discovery: env.discovery,
-      tokenManager: env.tokenManager,
-    }),
-  });
-
-  // collator gathers entities from techdocs.
-  indexBuilder.addCollator({
-    schedule,
-    factory: DefaultTechDocsCollatorFactory.fromConfig(env.config, {
-      discovery: env.discovery,
-      logger: env.logger,
-      tokenManager: env.tokenManager,
-    }),
-  });
-
-  // The scheduler controls when documents are gathered from collators and sent
-  // to the search engine for indexing.
-  const { scheduler } = await indexBuilder.build();
-  scheduler.start();
-
-  useHotCleanup(module, () => scheduler.stop());
-
-  return await createRouter({
-    engine: indexBuilder.getSearchEngine(),
-    types: indexBuilder.getDocumentTypes(),
-    permissions: env.permissions,
-    config: env.config,
-    logger: env.logger,
-  });
-}
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
deleted file mode 100644
index be8bb0c..0000000
--- a/packages/backend/src/plugins/techdocs.ts
+++ /dev/null
@@ -1,51 +0,0 @@
-import { DockerContainerRunner } from '@backstage/backend-common';
-import {
-  createRouter,
-  Generators,
-  Preparers,
-  Publisher,
-} from '@backstage/plugin-techdocs-backend';
-import Docker from 'dockerode';
-import { Router } from 'express';
-import { PluginEnvironment } from '../types';
-
-export default async function createPlugin(
-  env: PluginEnvironment,
-): Promise<Router> {
-  // Preparers are responsible for fetching source files for documentation.
-  const preparers = await Preparers.fromConfig(env.config, {
-    logger: env.logger,
-    reader: env.reader,
-  });
-
-  // Docker client (conditionally) used by the generators, based on techdocs.generators config.
-  const dockerClient = new Docker();
-  const containerRunner = new DockerContainerRunner({ dockerClient });
-
-  // Generators are used for generating documentation sites.
-  const generators = await Generators.fromConfig(env.config, {
-    logger: env.logger,
-    containerRunner,
-  });
-
-  // Publisher is used for
-  // 1. Publishing generated files to storage
-  // 2. Fetching files from storage and passing them to TechDocs frontend.
-  const publisher = await Publisher.fromConfig(env.config, {
-    logger: env.logger,
-    discovery: env.discovery,
-  });
-
-  // checks if the publisher is working and logs the result
-  await publisher.getReadiness();
-
-  return await createRouter({
-    preparers,
-    generators,
-    publisher,
-    logger: env.logger,
-    config: env.config,
-    discovery: env.discovery,
-    cache: env.cache,
-  });
-}
diff --git a/packages/backend/src/types.ts b/packages/backend/src/types.ts
deleted file mode 100644
index 9cd2c74..0000000
--- a/packages/backend/src/types.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import { Logger } from 'winston';
-import { Config } from '@backstage/config';
-import {
-  PluginCacheManager,
-  PluginDatabaseManager,
-  PluginEndpointDiscovery,
-  TokenManager,
-  UrlReader,
-} from '@backstage/backend-common';
-import { PluginTaskScheduler } from '@backstage/backend-tasks';
-import { PermissionEvaluator } from '@backstage/plugin-permission-common';
-import { IdentityApi } from '@backstage/plugin-auth-node';
-
-export type PluginEnvironment = {
-  logger: Logger;
-  database: PluginDatabaseManager;
-  cache: PluginCacheManager;
-  config: Config;
-  reader: UrlReader;
-  discovery: PluginEndpointDiscovery;
-  tokenManager: TokenManager;
-  scheduler: PluginTaskScheduler;
-  permissions: PermissionEvaluator;
-  identity: IdentityApi;
-};
diff --git a/playwright.config.ts b/playwright.config.ts
index 37c7fb1..733be13 100644
--- a/playwright.config.ts
+++ b/playwright.config.ts
@@ -34,3 +34,3 @@ export default defineConfig({
         {
-          command: 'yarn start',
+          command: 'yarn dev',
           port: 3000,
diff --git a/yarn.lock b/yarn.lock
index 5ad7fe2..c37fc61 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1 +1,3 @@
-# intentionally left empty
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
+
