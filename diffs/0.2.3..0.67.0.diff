diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..63c9c34
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1,5 @@
+.git
+node_modules
+packages
+!packages/backend/dist
+plugins
diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
deleted file mode 100644
index edc4ee9..0000000
--- a/.github/workflows/release.yml
+++ /dev/null
@@ -1,76 +0,0 @@
-name: Create new release diffs
-on:
-  workflow_dispatch:
-    inputs:
-      version:
-        description: "The version of Backstage to release. If missing, the latest version will be used"
-        required: false
-        default: ""
-jobs:
-  release:
-    name: Create release branch
-    runs-on: ubuntu-latest
-    env:
-      BACKSTAGE_APP_NAME: backstagediffapp
-    outputs:
-      backstage_version: ${{ steps.set-outputs.outputs.backstage_version }}
-    steps:
-      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
-      - name: Check out repository code
-        uses: actions/checkout@v2
-        with:
-          ref: "release-base"
-      - name: Set @backstage/create-app version
-        run: echo "CREATE_APP_VERSION=${INPUT_VERSION:-$(npm view @backstage/create-app version)}" >> $GITHUB_ENV
-      - name: Run @backstage/create-app
-        run: printf "$BACKSTAGE_APP_NAME\n\t" | npx @backstage/create-app@${CREATE_APP_VERSION} --skip-install
-      - name: Check current directory
-        run: pwd
-      - name: Move all the files into the root directory
-        run: cp -ar $(pwd)/$BACKSTAGE_APP_NAME/. $(pwd)
-      - name: Setup git bot user
-        run: |
-          git config user.name "github-actions[bot]"
-          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
-      - name: Add release
-        run: |
-          git checkout -b release/${CREATE_APP_VERSION}
-          git add .
-          git reset $BACKSTAGE_APP_NAME
-          git commit -m "Release ${CREATE_APP_VERSION}"
-          git push origin release/${CREATE_APP_VERSION}
-      - id: set-outputs
-        name: Set outputs
-        run: echo "::set-output name=backstage_version::$(echo $CREATE_APP_VERSION)"
-      - run: echo "üçè This job's status is ${{ job.status }}."
-  diff:
-    name: Create new diffs
-    runs-on: ubuntu-latest
-    needs: release
-    steps:
-      - name: Check out diffs branch
-        uses: actions/checkout@v2
-        with:
-          ref: "master"
-          fetch-depth: 0
-      - name: Create new diffs
-        run: |
-          for version in $(jq -r 'keys |.[]' < releases.json); do
-            echo "Creating diffs between version $version and $NEW_VERSION"
-            git diff -U1 origin/release/$version..origin/release/$NEW_VERSION > diffs/$version..$NEW_VERSION.diff
-          done
-          jq ".\"$NEW_VERSION\" = {}" < releases.json > _releases.json
-          mv _releases.json releases.json
-        env:
-          NEW_VERSION: ${{needs.release.outputs.backstage_version}}
-      - name: Setup git bot user
-        run: |
-          git config user.name "github-actions[bot]"
-          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
-      - name: Push the changes
-        run: |
-          git add .
-          git commit -m "Add release ${NEW_VERSION}"
-          git push
-        env:
-          NEW_VERSION: ${{needs.release.outputs.backstage_version}}
diff --git a/.gitignore b/.gitignore
index 5f5cc73..d16a8d3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,4 @@
+# macOS
+.DS_Store
+
 # Logs
@@ -32,2 +35,5 @@ site
 # Local configuration files
-*.local.yaml
\ No newline at end of file
+*.local.yaml
+
+# Sensitive credentials
+*-credentials.yaml
diff --git a/.prettierignore b/.prettierignore
new file mode 100644
index 0000000..dfb0f1c
--- /dev/null
+++ b/.prettierignore
@@ -0,0 +1,4 @@
+dist
+dist-types
+coverage
+.vscode
diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 2c5e115..0000000
--- a/LICENSE
+++ /dev/null
@@ -1,201 +0,0 @@
-                              Apache License
-                        Version 2.0, January 2004
-                     http://www.apache.org/licenses/
-
-TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-1. Definitions.
-
-   "License" shall mean the terms and conditions for use, reproduction,
-   and distribution as defined by Sections 1 through 9 of this document.
-
-   "Licensor" shall mean the copyright owner or entity authorized by
-   the copyright owner that is granting the License.
-
-   "Legal Entity" shall mean the union of the acting entity and all
-   other entities that control, are controlled by, or are under common
-   control with that entity. For the purposes of this definition,
-   "control" means (i) the power, direct or indirect, to cause the
-   direction or management of such entity, whether by contract or
-   otherwise, or (ii) ownership of fifty percent (50%) or more of the
-   outstanding shares, or (iii) beneficial ownership of such entity.
-
-   "You" (or "Your") shall mean an individual or Legal Entity
-   exercising permissions granted by this License.
-
-   "Source" form shall mean the preferred form for making modifications,
-   including but not limited to software source code, documentation
-   source, and configuration files.
-
-   "Object" form shall mean any form resulting from mechanical
-   transformation or translation of a Source form, including but
-   not limited to compiled object code, generated documentation,
-   and conversions to other media types.
-
-   "Work" shall mean the work of authorship, whether in Source or
-   Object form, made available under the License, as indicated by a
-   copyright notice that is included in or attached to the work
-   (an example is provided in the Appendix below).
-
-   "Derivative Works" shall mean any work, whether in Source or Object
-   form, that is based on (or derived from) the Work and for which the
-   editorial revisions, annotations, elaborations, or other modifications
-   represent, as a whole, an original work of authorship. For the purposes
-   of this License, Derivative Works shall not include works that remain
-   separable from, or merely link (or bind by name) to the interfaces of,
-   the Work and Derivative Works thereof.
-
-   "Contribution" shall mean any work of authorship, including
-   the original version of the Work and any modifications or additions
-   to that Work or Derivative Works thereof, that is intentionally
-   submitted to Licensor for inclusion in the Work by the copyright owner
-   or by an individual or Legal Entity authorized to submit on behalf of
-   the copyright owner. For the purposes of this definition, "submitted"
-   means any form of electronic, verbal, or written communication sent
-   to the Licensor or its representatives, including but not limited to
-   communication on electronic mailing lists, source code control systems,
-   and issue tracking systems that are managed by, or on behalf of, the
-   Licensor for the purpose of discussing and improving the Work, but
-   excluding communication that is conspicuously marked or otherwise
-   designated in writing by the copyright owner as "Not a Contribution."
-
-   "Contributor" shall mean Licensor and any individual or Legal Entity
-   on behalf of whom a Contribution has been received by Licensor and
-   subsequently incorporated within the Work.
-
-2. Grant of Copyright License. Subject to the terms and conditions of
-   this License, each Contributor hereby grants to You a perpetual,
-   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-   copyright license to reproduce, prepare Derivative Works of,
-   publicly display, publicly perform, sublicense, and distribute the
-   Work and such Derivative Works in Source or Object form.
-
-3. Grant of Patent License. Subject to the terms and conditions of
-   this License, each Contributor hereby grants to You a perpetual,
-   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-   (except as stated in this section) patent license to make, have made,
-   use, offer to sell, sell, import, and otherwise transfer the Work,
-   where such license applies only to those patent claims licensable
-   by such Contributor that are necessarily infringed by their
-   Contribution(s) alone or by combination of their Contribution(s)
-   with the Work to which such Contribution(s) was submitted. If You
-   institute patent litigation against any entity (including a
-   cross-claim or counterclaim in a lawsuit) alleging that the Work
-   or a Contribution incorporated within the Work constitutes direct
-   or contributory patent infringement, then any patent licenses
-   granted to You under this License for that Work shall terminate
-   as of the date such litigation is filed.
-
-4. Redistribution. You may reproduce and distribute copies of the
-   Work or Derivative Works thereof in any medium, with or without
-   modifications, and in Source or Object form, provided that You
-   meet the following conditions:
-
-   (a) You must give any other recipients of the Work or
-       Derivative Works a copy of this License; and
-
-   (b) You must cause any modified files to carry prominent notices
-       stating that You changed the files; and
-
-   (c) You must retain, in the Source form of any Derivative Works
-       that You distribute, all copyright, patent, trademark, and
-       attribution notices from the Source form of the Work,
-       excluding those notices that do not pertain to any part of
-       the Derivative Works; and
-
-   (d) If the Work includes a "NOTICE" text file as part of its
-       distribution, then any Derivative Works that You distribute must
-       include a readable copy of the attribution notices contained
-       within such NOTICE file, excluding those notices that do not
-       pertain to any part of the Derivative Works, in at least one
-       of the following places: within a NOTICE text file distributed
-       as part of the Derivative Works; within the Source form or
-       documentation, if provided along with the Derivative Works; or,
-       within a display generated by the Derivative Works, if and
-       wherever such third-party notices normally appear. The contents
-       of the NOTICE file are for informational purposes only and
-       do not modify the License. You may add Your own attribution
-       notices within Derivative Works that You distribute, alongside
-       or as an addendum to the NOTICE text from the Work, provided
-       that such additional attribution notices cannot be construed
-       as modifying the License.
-
-   You may add Your own copyright statement to Your modifications and
-   may provide additional or different license terms and conditions
-   for use, reproduction, or distribution of Your modifications, or
-   for any such Derivative Works as a whole, provided Your use,
-   reproduction, and distribution of the Work otherwise complies with
-   the conditions stated in this License.
-
-5. Submission of Contributions. Unless You explicitly state otherwise,
-   any Contribution intentionally submitted for inclusion in the Work
-   by You to the Licensor shall be under the terms and conditions of
-   this License, without any additional terms or conditions.
-   Notwithstanding the above, nothing herein shall supersede or modify
-   the terms of any separate license agreement you may have executed
-   with Licensor regarding such Contributions.
-
-6. Trademarks. This License does not grant permission to use the trade
-   names, trademarks, service marks, or product names of the Licensor,
-   except as required for reasonable and customary use in describing the
-   origin of the Work and reproducing the content of the NOTICE file.
-
-7. Disclaimer of Warranty. Unless required by applicable law or
-   agreed to in writing, Licensor provides the Work (and each
-   Contributor provides its Contributions) on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-   implied, including, without limitation, any warranties or conditions
-   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-   PARTICULAR PURPOSE. You are solely responsible for determining the
-   appropriateness of using or redistributing the Work and assume any
-   risks associated with Your exercise of permissions under this License.
-
-8. Limitation of Liability. In no event and under no legal theory,
-   whether in tort (including negligence), contract, or otherwise,
-   unless required by applicable law (such as deliberate and grossly
-   negligent acts) or agreed to in writing, shall any Contributor be
-   liable to You for damages, including any direct, indirect, special,
-   incidental, or consequential damages of any character arising as a
-   result of this License or out of the use or inability to use the
-   Work (including but not limited to damages for loss of goodwill,
-   work stoppage, computer failure or malfunction, or any and all
-   other commercial damages or losses), even if such Contributor
-   has been advised of the possibility of such damages.
-
-9. Accepting Warranty or Additional Liability. While redistributing
-   the Work or Derivative Works thereof, You may choose to offer,
-   and charge a fee for, acceptance of support, warranty, indemnity,
-   or other liability obligations and/or rights consistent with this
-   License. However, in accepting such obligations, You may act only
-   on Your own behalf and on Your sole responsibility, not on behalf
-   of any other Contributor, and only if You agree to indemnify,
-   defend, and hold each Contributor harmless for any liability
-   incurred by, or claims asserted against, such Contributor by reason
-   of your accepting any such warranty or additional liability.
-
-END OF TERMS AND CONDITIONS
-
-APPENDIX: How to apply the Apache License to your work.
-
-   To apply the Apache License to your work, attach the following
-   boilerplate notice, with the fields enclosed by brackets "[]"
-   replaced with your own identifying information. (Don't include
-   the brackets!)  The text should be enclosed in the appropriate
-   comment syntax for the file format. We also recommend that a
-   file or class name and description of purpose be included on the
-   same "printed page" as the copyright notice for easier
-   identification within third-party archives.
-
-Copyright 2020 The Backstage Authors
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
\ No newline at end of file
diff --git a/README.md b/README.md
index b2594d1..8c7c437 100644
--- a/README.md
+++ b/README.md
@@ -3 +3,8 @@
 This is your newly scaffolded Backstage App, Good Luck!
+
+To start the app, run:
+
+```sh
+yarn install
+yarn dev
+```
diff --git a/app-config.production.yaml b/app-config.production.yaml
index 92f4574..5e36c23 100644
--- a/app-config.production.yaml
+++ b/app-config.production.yaml
@@ -2,7 +2,7 @@ app:
   # Should be the same as backend.baseUrl when using the `app-backend` plugin
-  baseUrl: http://localhost:7000
+  baseUrl: http://localhost:7007
 
 backend:
-  baseUrl: http://localhost:7000
+  baseUrl: http://localhost:7007
   listen:
-    port: 7000
+    port: 7007
diff --git a/app-config.yaml b/app-config.yaml
index 269756c..d45e354 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -8,7 +8,15 @@ organization:
 backend:
-  baseUrl: http://localhost:7000
+  # Used for enabling authentication, secret is shared by all backend plugins
+  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
+  # information on the format
+  # auth:
+  #   keys:
+  #     - secret: ${BACKEND_SECRET}
+  baseUrl: http://localhost:7007
   listen:
-    port: 7000
+    port: 7007
   csp:
     connect-src: ["'self'", 'http:', 'https:']
+    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
+    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
   cors:
@@ -20,2 +28,4 @@ backend:
     connection: ':memory:'
+  cache:
+    store: memory
   # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
@@ -25,4 +35,3 @@ integrations:
     - host: github.com
-      token:
-        $env: GITHUB_TOKEN
+      token: ${GITHUB_TOKEN}
     ### Example for how to add your GitHub Enterprise instance using the API:
@@ -30,4 +39,3 @@ integrations:
     #   apiBaseUrl: https://ghe.example.net/api/v3
-    #   token:
-    #     $env: GHE_TOKEN
+    #   token: ${GHE_TOKEN}
 
@@ -38,13 +46,15 @@ proxy:
 
+# Reference documentation http://backstage.io/docs/features/techdocs/configuration
+# Note: After experimenting with basic setup, use CI/CD to generate docs
+# and an external cloud storage when deploying TechDocs for production use-case.
+# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
 techdocs:
-  storageUrl: http://localhost:7000/api/techdocs/static/docs
-  requestUrl: http://localhost:7000/api/techdocs
-  generators:
-    techdocs: 'docker'
-
-lighthouse:
-  baseUrl: http://localhost:3003
+  builder: 'local' # Alternatives - 'external'
+  generator:
+    runIn: 'docker' # Alternatives - 'local'
+  publisher:
+    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
 
 auth:
-  # see https://backstage.io/docs/tutorials/quickstart-app-auth to know more about enabling auth providers
+  # see https://backstage.io/docs/auth/ to learn about auth providers
   providers: {}
@@ -52,10 +62,10 @@ auth:
 scaffolder:
-  github:
-    token:
-      $env: GITHUB_TOKEN
-    visibility: public # or 'internal' or 'private'
+  # see https://backstage.io/docs/features/software-templates/configuration for software template options
 
 catalog:
+  import:
+    entityFilename: catalog-info.yaml
+    pullRequestBranchName: backstage-integration
   rules:
-    - allow: [Component, API, Group, User, Template, Location]
+    - allow: [Component, System, API, Group, User, Resource, Location]
   locations:
@@ -65,2 +75,6 @@ catalog:
 
+    # Backstage example systems
+    - type: url
+      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml
+
     # Backstage example APIs
@@ -69,16 +83,20 @@ catalog:
 
+    # Backstage example resources
+    - type: url
+      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-resources.yaml
+
+    # Backstage example organization groups
+    - type: url
+      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml
+
     # Backstage example templates
-    - type: github
-      target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/react-ssr-template/template.yaml
-      rules:
-        - allow: [Template]
-    - type: github
-      target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/springboot-grpc-template/template.yaml
+    - type: url
+      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
       rules:
         - allow: [Template]
-    - type: github
-      target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/create-react-app/template.yaml
+    - type: url
+      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/springboot-grpc-template/template.yaml
       rules:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml
@@ -86,4 +104,4 @@ catalog:
         - allow: [Template]
-    - type: github
-      target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/docs-template/template.yaml
+    - type: url
+      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/docs-template/template.yaml
       rules:
diff --git a/backstage.json b/backstage.json
new file mode 100644
index 0000000..5d45824
--- /dev/null
+++ b/backstage.json
@@ -0,0 +1,3 @@
+{
+  "version": "0.4.19"
+}
diff --git a/catalog-info.yaml b/catalog-info.yaml
index 41794b4..adeb66d 100644
--- a/catalog-info.yaml
+++ b/catalog-info.yaml
@@ -7,4 +7,4 @@ metadata:
   # annotations:
-    # github.com/project-slug: backstage/backstage
-    # backstage.io/techdocs-ref: github:https://github.com/backstage/backstage.git
+  #   github.com/project-slug: backstage/backstage
+  #   backstage.io/techdocs-ref: dir:.
 spec:
diff --git a/diffs/0.1.1..0.2.0.diff b/diffs/0.1.1..0.2.0.diff
deleted file mode 100644
index ca6064d..0000000
--- a/diffs/0.1.1..0.2.0.diff
+++ /dev/null
@@ -1,77 +0,0 @@
-diff --git a/package.json b/package.json
-index b6fb091..db8ca15 100644
---- a/package.json
-+++ b/package.json
-@@ -28,3 +28,3 @@
-   "devDependencies": {
--    "@backstage/cli": "^0.1.1",
-+    "@backstage/cli": "^0.2.0",
-     "@spotify/prettier-config": "^7.0.0",
-diff --git a/packages/app/package.json b/packages/app/package.json
-index 3754d7e..985aa1e 100644
---- a/packages/app/package.json
-+++ b/packages/app/package.json
-@@ -8,18 +8,18 @@
-     "@material-ui/icons": "^4.9.1",
--    "@backstage/cli": "^0.1.1",
--    "@backstage/core": "^0.1.1",
--    "@backstage/plugin-api-docs": "^0.1.1",
--    "@backstage/plugin-catalog": "^0.1.1",
--    "@backstage/plugin-register-component": "^0.1.1",
--    "@backstage/plugin-scaffolder": "^0.1.1",
--    "@backstage/plugin-techdocs": "^0.1.1",
--    "@backstage/catalog-model": "^0.1.1",
--    "@backstage/plugin-circleci": "^0.1.1",
--    "@backstage/plugin-explore": "^0.1.1",
--    "@backstage/plugin-lighthouse": "^0.1.1",
--    "@backstage/plugin-tech-radar": "^0.1.1",
--    "@backstage/plugin-github-actions": "^0.1.1",
--    "@backstage/plugin-user-settings": "^0.1.1",
--    "@backstage/test-utils": "^0.1.1",
--    "@backstage/theme": "^0.1.1",
-+    "@backstage/cli": "^0.2.0",
-+    "@backstage/core": "^0.2.0",
-+    "@backstage/plugin-api-docs": "^0.2.0",
-+    "@backstage/plugin-catalog": "^0.2.0",
-+    "@backstage/plugin-register-component": "^0.2.0",
-+    "@backstage/plugin-scaffolder": "^0.2.0",
-+    "@backstage/plugin-techdocs": "^0.2.0",
-+    "@backstage/catalog-model": "^0.2.0",
-+    "@backstage/plugin-circleci": "^0.2.0",
-+    "@backstage/plugin-explore": "^0.2.0",
-+    "@backstage/plugin-lighthouse": "^0.2.0",
-+    "@backstage/plugin-tech-radar": "^0.2.0",
-+    "@backstage/plugin-github-actions": "^0.2.0",
-+    "@backstage/plugin-user-settings": "^0.2.0",
-+    "@backstage/test-utils": "^0.1.2",
-+    "@backstage/theme": "^0.2.0",
-     "history": "^5.0.0",
-diff --git a/packages/backend/package.json b/packages/backend/package.json
-index 413fa29..a6ddda7 100644
---- a/packages/backend/package.json
-+++ b/packages/backend/package.json
-@@ -19,11 +19,11 @@
-   "dependencies": {
--    "@backstage/backend-common": "^0.1.1",
--    "@backstage/catalog-model": "^0.1.1",
-+    "@backstage/backend-common": "^0.2.0",
-+    "@backstage/catalog-model": "^0.2.0",
-     "@backstage/config": "^0.1.1",
--    "@backstage/plugin-auth-backend": "^0.1.1",
--    "@backstage/plugin-catalog-backend": "^0.1.1",
--    "@backstage/plugin-proxy-backend": "^0.1.1",
--    "@backstage/plugin-rollbar-backend": "^0.1.1",
--    "@backstage/plugin-scaffolder-backend": "^0.1.1",
--    "@backstage/plugin-techdocs-backend": "^0.1.1",
-+    "@backstage/plugin-auth-backend": "^0.2.0",
-+    "@backstage/plugin-catalog-backend": "^0.2.0",
-+    "@backstage/plugin-proxy-backend": "^0.2.0",
-+    "@backstage/plugin-rollbar-backend": "^0.1.2",
-+    "@backstage/plugin-scaffolder-backend": "^0.2.0",
-+    "@backstage/plugin-techdocs-backend": "^0.2.0",
-     "@octokit/rest": "^18.0.0",
-@@ -38,3 +38,3 @@
-   "devDependencies": {
--    "@backstage/cli": "^0.1.1",
-+    "@backstage/cli": "^0.2.0",
-     "@types/dockerode": "^2.5.32",
diff --git a/diffs/0.1.1..0.2.1.diff b/diffs/0.1.1..0.2.1.diff
deleted file mode 100644
index f813e20..0000000
--- a/diffs/0.1.1..0.2.1.diff
+++ /dev/null
@@ -1,108 +0,0 @@
-diff --git a/package.json b/package.json
-index b6fb091..db8ca15 100644
---- a/package.json
-+++ b/package.json
-@@ -28,3 +28,3 @@
-   "devDependencies": {
--    "@backstage/cli": "^0.1.1",
-+    "@backstage/cli": "^0.2.0",
-     "@spotify/prettier-config": "^7.0.0",
-diff --git a/packages/app/package.json b/packages/app/package.json
-index 3754d7e..5a3a236 100644
---- a/packages/app/package.json
-+++ b/packages/app/package.json
-@@ -8,18 +8,18 @@
-     "@material-ui/icons": "^4.9.1",
--    "@backstage/cli": "^0.1.1",
--    "@backstage/core": "^0.1.1",
--    "@backstage/plugin-api-docs": "^0.1.1",
--    "@backstage/plugin-catalog": "^0.1.1",
--    "@backstage/plugin-register-component": "^0.1.1",
--    "@backstage/plugin-scaffolder": "^0.1.1",
--    "@backstage/plugin-techdocs": "^0.1.1",
--    "@backstage/catalog-model": "^0.1.1",
--    "@backstage/plugin-circleci": "^0.1.1",
--    "@backstage/plugin-explore": "^0.1.1",
--    "@backstage/plugin-lighthouse": "^0.1.1",
--    "@backstage/plugin-tech-radar": "^0.1.1",
--    "@backstage/plugin-github-actions": "^0.1.1",
--    "@backstage/plugin-user-settings": "^0.1.1",
--    "@backstage/test-utils": "^0.1.1",
--    "@backstage/theme": "^0.1.1",
-+    "@backstage/cli": "^0.2.0",
-+    "@backstage/core": "^0.3.0",
-+    "@backstage/plugin-api-docs": "^0.2.1",
-+    "@backstage/plugin-catalog": "^0.2.1",
-+    "@backstage/plugin-register-component": "^0.2.1",
-+    "@backstage/plugin-scaffolder": "^0.3.0",
-+    "@backstage/plugin-techdocs": "^0.2.1",
-+    "@backstage/catalog-model": "^0.2.0",
-+    "@backstage/plugin-circleci": "^0.2.1",
-+    "@backstage/plugin-explore": "^0.2.1",
-+    "@backstage/plugin-lighthouse": "^0.2.1",
-+    "@backstage/plugin-tech-radar": "^0.3.0",
-+    "@backstage/plugin-github-actions": "^0.2.1",
-+    "@backstage/plugin-user-settings": "^0.2.1",
-+    "@backstage/test-utils": "^0.1.2",
-+    "@backstage/theme": "^0.2.1",
-     "history": "^5.0.0",
-diff --git a/packages/app/src/plugins.ts b/packages/app/src/plugins.ts
-index c787ac2..b719594 100644
---- a/packages/app/src/plugins.ts
-+++ b/packages/app/src/plugins.ts
-@@ -1 +1,2 @@
-+export { plugin as ApiDocs } from '@backstage/plugin-api-docs';
- export { plugin as CatalogPlugin } from '@backstage/plugin-catalog';
-diff --git a/packages/backend/package.json b/packages/backend/package.json
-index 413fa29..b2f24a8 100644
---- a/packages/backend/package.json
-+++ b/packages/backend/package.json
-@@ -19,13 +19,13 @@
-   "dependencies": {
--    "@backstage/backend-common": "^0.1.1",
--    "@backstage/catalog-model": "^0.1.1",
-+    "@backstage/backend-common": "^0.2.1",
-+    "@backstage/catalog-model": "^0.2.0",
-     "@backstage/config": "^0.1.1",
--    "@backstage/plugin-auth-backend": "^0.1.1",
--    "@backstage/plugin-catalog-backend": "^0.1.1",
--    "@backstage/plugin-proxy-backend": "^0.1.1",
--    "@backstage/plugin-rollbar-backend": "^0.1.1",
--    "@backstage/plugin-scaffolder-backend": "^0.1.1",
--    "@backstage/plugin-techdocs-backend": "^0.1.1",
-+    "@backstage/plugin-auth-backend": "^0.2.1",
-+    "@backstage/plugin-catalog-backend": "^0.2.0",
-+    "@backstage/plugin-proxy-backend": "^0.2.0",
-+    "@backstage/plugin-rollbar-backend": "^0.1.2",
-+    "@backstage/plugin-scaffolder-backend": "^0.3.0",
-+    "@backstage/plugin-techdocs-backend": "^0.2.0",
-     "@octokit/rest": "^18.0.0",
--    "@gitbeaker/node": "^23.5.0",
-+    "@gitbeaker/node": "^25.2.0",
-     "dockerode": "^3.2.0",
-@@ -38,3 +38,3 @@
-   "devDependencies": {
--    "@backstage/cli": "^0.1.1",
-+    "@backstage/cli": "^0.2.0",
-     "@types/dockerode": "^2.5.32",
-diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
-index 8de1592..2dc69fe 100644
---- a/packages/backend/src/plugins/scaffolder.ts
-+++ b/packages/backend/src/plugins/scaffolder.ts
-@@ -13,3 +13,5 @@ import {
-   RepoVisibilityOptions,
-+  CatalogEntityClient,
- } from '@backstage/plugin-scaffolder-backend';
-+import { SingleHostDiscovery } from '@backstage/backend-common';
- import { Octokit } from '@octokit/rest';
-@@ -99,2 +101,6 @@ export default async function createPlugin({
-   const dockerClient = new Docker();
-+
-+  const discovery = SingleHostDiscovery.fromConfig(config);
-+  const entityClient = new CatalogEntityClient({ discovery });
-+
-   return await createRouter({
-@@ -106,2 +112,3 @@ export default async function createPlugin({
-     dockerClient,
-+    entityClient,
-   });
diff --git a/diffs/0.2.0..0.2.1.diff b/diffs/0.2.0..0.2.1.diff
deleted file mode 100644
index 852f136..0000000
--- a/diffs/0.2.0..0.2.1.diff
+++ /dev/null
@@ -1,85 +0,0 @@
-diff --git a/packages/app/package.json b/packages/app/package.json
-index 985aa1e..5a3a236 100644
---- a/packages/app/package.json
-+++ b/packages/app/package.json
-@@ -9,17 +9,17 @@
-     "@backstage/cli": "^0.2.0",
--    "@backstage/core": "^0.2.0",
--    "@backstage/plugin-api-docs": "^0.2.0",
--    "@backstage/plugin-catalog": "^0.2.0",
--    "@backstage/plugin-register-component": "^0.2.0",
--    "@backstage/plugin-scaffolder": "^0.2.0",
--    "@backstage/plugin-techdocs": "^0.2.0",
-+    "@backstage/core": "^0.3.0",
-+    "@backstage/plugin-api-docs": "^0.2.1",
-+    "@backstage/plugin-catalog": "^0.2.1",
-+    "@backstage/plugin-register-component": "^0.2.1",
-+    "@backstage/plugin-scaffolder": "^0.3.0",
-+    "@backstage/plugin-techdocs": "^0.2.1",
-     "@backstage/catalog-model": "^0.2.0",
--    "@backstage/plugin-circleci": "^0.2.0",
--    "@backstage/plugin-explore": "^0.2.0",
--    "@backstage/plugin-lighthouse": "^0.2.0",
--    "@backstage/plugin-tech-radar": "^0.2.0",
--    "@backstage/plugin-github-actions": "^0.2.0",
--    "@backstage/plugin-user-settings": "^0.2.0",
-+    "@backstage/plugin-circleci": "^0.2.1",
-+    "@backstage/plugin-explore": "^0.2.1",
-+    "@backstage/plugin-lighthouse": "^0.2.1",
-+    "@backstage/plugin-tech-radar": "^0.3.0",
-+    "@backstage/plugin-github-actions": "^0.2.1",
-+    "@backstage/plugin-user-settings": "^0.2.1",
-     "@backstage/test-utils": "^0.1.2",
--    "@backstage/theme": "^0.2.0",
-+    "@backstage/theme": "^0.2.1",
-     "history": "^5.0.0",
-diff --git a/packages/app/src/plugins.ts b/packages/app/src/plugins.ts
-index c787ac2..b719594 100644
---- a/packages/app/src/plugins.ts
-+++ b/packages/app/src/plugins.ts
-@@ -1 +1,2 @@
-+export { plugin as ApiDocs } from '@backstage/plugin-api-docs';
- export { plugin as CatalogPlugin } from '@backstage/plugin-catalog';
-diff --git a/packages/backend/package.json b/packages/backend/package.json
-index a6ddda7..b2f24a8 100644
---- a/packages/backend/package.json
-+++ b/packages/backend/package.json
-@@ -19,6 +19,6 @@
-   "dependencies": {
--    "@backstage/backend-common": "^0.2.0",
-+    "@backstage/backend-common": "^0.2.1",
-     "@backstage/catalog-model": "^0.2.0",
-     "@backstage/config": "^0.1.1",
--    "@backstage/plugin-auth-backend": "^0.2.0",
-+    "@backstage/plugin-auth-backend": "^0.2.1",
-     "@backstage/plugin-catalog-backend": "^0.2.0",
-@@ -26,6 +26,6 @@
-     "@backstage/plugin-rollbar-backend": "^0.1.2",
--    "@backstage/plugin-scaffolder-backend": "^0.2.0",
-+    "@backstage/plugin-scaffolder-backend": "^0.3.0",
-     "@backstage/plugin-techdocs-backend": "^0.2.0",
-     "@octokit/rest": "^18.0.0",
--    "@gitbeaker/node": "^23.5.0",
-+    "@gitbeaker/node": "^25.2.0",
-     "dockerode": "^3.2.0",
-diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
-index 8de1592..2dc69fe 100644
---- a/packages/backend/src/plugins/scaffolder.ts
-+++ b/packages/backend/src/plugins/scaffolder.ts
-@@ -13,3 +13,5 @@ import {
-   RepoVisibilityOptions,
-+  CatalogEntityClient,
- } from '@backstage/plugin-scaffolder-backend';
-+import { SingleHostDiscovery } from '@backstage/backend-common';
- import { Octokit } from '@octokit/rest';
-@@ -99,2 +101,6 @@ export default async function createPlugin({
-   const dockerClient = new Docker();
-+
-+  const discovery = SingleHostDiscovery.fromConfig(config);
-+  const entityClient = new CatalogEntityClient({ discovery });
-+
-   return await createRouter({
-@@ -106,2 +112,3 @@ export default async function createPlugin({
-     dockerClient,
-+    entityClient,
-   });
diff --git a/package.json b/package.json
index 77fec40..6f04cc3 100644
--- a/package.json
+++ b/package.json
@@ -5,6 +5,8 @@
   "engines": {
-    "node": "12 || 14"
+    "node": "14 || 16"
   },
   "scripts": {
+    "dev": "concurrently \"yarn start\" \"yarn start-backend\"",
     "start": "yarn workspace app start",
+    "start-backend": "yarn workspace backend start",
     "build": "lerna run build",
@@ -15,3 +17,3 @@
     "diff": "lerna run diff --",
-    "test": "lerna run test --since origin/master -- --coverage",
+    "test": "backstage-cli test",
     "test:all": "lerna run test -- --coverage",
@@ -19,3 +21,4 @@
     "lint:all": "lerna run lint --",
-    "create-plugin": "backstage-cli create-plugin --scope internal --no-private",
+    "prettier:check": "prettier --check .",
+    "create-plugin": "backstage-cli create-plugin --scope internal",
     "remove-plugin": "backstage-cli remove-plugin"
@@ -29,6 +32,8 @@
   "devDependencies": {
-    "@backstage/cli": "^0.4.0",
-    "@spotify/prettier-config": "^7.0.0",
-    "lerna": "^3.20.2",
-    "prettier": "^1.19.1"
+    "@backstage/cli": "^0.13.2",
+    "@spotify/prettier-config": "^12.0.0",
+    "concurrently": "^6.0.0",
+    "lerna": "^4.0.0",
+    "prettier": "^2.3.2",
+    "typescript": "~4.5.4"
   },
@@ -36,3 +41,3 @@
   "lint-staged": {
-    "*.{js,jsx,ts,tsx}": [
+    "*.{js,jsx,ts,tsx,mjs,cjs}": [
       "eslint --fix",
@@ -43,7 +48,2 @@
     ]
-  },
-  "jest": {
-    "transformModules": [
-      "@kyma-project/asyncapi-react"
-    ]
   }
diff --git a/packages/app/cypress/integration/app.js b/packages/app/cypress/integration/app.js
index efcd5b8..43fb2e3 100644
--- a/packages/app/cypress/integration/app.js
+++ b/packages/app/cypress/integration/app.js
@@ -3,3 +3,3 @@ describe('App', () => {
     cy.visit('/');
-    cy.contains('My Company Service Catalog');
+    cy.contains('My Company Catalog');
   });
diff --git a/packages/app/package.json b/packages/app/package.json
index 8272bd0..447761d 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -6,22 +6,29 @@
   "dependencies": {
-    "@material-ui/core": "^4.11.0",
+    "@backstage/app-defaults": "^0.1.7",
+    "@backstage/catalog-model": "^0.9.10",
+    "@backstage/cli": "^0.13.2",
+    "@backstage/core-app-api": "^0.5.2",
+    "@backstage/core-components": "^0.8.8",
+    "@backstage/core-plugin-api": "^0.6.0",
+    "@backstage/integration-react": "^0.1.21",
+    "@backstage/plugin-api-docs": "^0.7.2",
+    "@backstage/plugin-catalog": "^0.7.12",
+    "@backstage/plugin-catalog-common": "^0.1.2",
+    "@backstage/plugin-catalog-graph": "^0.2.10",
+    "@backstage/plugin-catalog-import": "^0.8.1",
+    "@backstage/plugin-catalog-react": "^0.6.14",
+    "@backstage/plugin-github-actions": "^0.4.35",
+    "@backstage/plugin-org": "^0.4.2-next.0",
+    "@backstage/plugin-permission-react": "^0.3.0",
+    "@backstage/plugin-scaffolder": "^0.12.2",
+    "@backstage/plugin-search": "^0.6.2",
+    "@backstage/plugin-tech-radar": "^0.5.5",
+    "@backstage/plugin-techdocs": "^0.13.3",
+    "@backstage/plugin-user-settings": "^0.3.19",
+    "@backstage/theme": "^0.2.14",
+    "@material-ui/core": "^4.12.2",
     "@material-ui/icons": "^4.9.1",
-    "@backstage/cli": "^0.4.0",
-    "@backstage/core": "^0.3.2",
-    "@backstage/plugin-api-docs": "^0.3.1",
-    "@backstage/plugin-catalog": "^0.2.5",
-    "@backstage/plugin-register-component": "^0.2.3",
-    "@backstage/plugin-scaffolder": "^0.3.2",
-    "@backstage/plugin-techdocs": "^0.3.1",
-    "@backstage/catalog-model": "^0.4.0",
-    "@backstage/plugin-circleci": "^0.2.3",
-    "@backstage/plugin-lighthouse": "^0.2.4",
-    "@backstage/plugin-tech-radar": "^0.3.0",
-    "@backstage/plugin-github-actions": "^0.2.3",
-    "@backstage/plugin-user-settings": "^0.2.2",
-    "@backstage/test-utils": "^0.1.4",
-    "@backstage/theme": "^0.2.1",
     "history": "^5.0.0",
-    "react": "^16.13.1",
-    "react-dom": "^16.13.1",
+    "react": "^17.0.2",
+    "react-dom": "^17.0.2",
     "react-router": "6.0.0-beta.0",
@@ -31,2 +38,3 @@
   "devDependencies": {
+    "@backstage/test-utils": "^0.2.4",
     "@testing-library/jest-dom": "^5.10.1",
@@ -35,6 +43,6 @@
     "@types/jest": "^26.0.7",
-    "@types/node": "^12.0.0",
-    "@types/react-dom": "^16.9.8",
+    "@types/node": "^14.14.32",
+    "@types/react-dom": "*",
     "cross-env": "^7.0.0",
-    "cypress": "^4.2.0",
+    "cypress": "^7.3.0",
     "eslint-plugin-cypress": "^2.10.3",
@@ -45,6 +53,7 @@
     "build": "backstage-cli app:build",
+    "clean": "backstage-cli clean",
     "test": "backstage-cli test",
-    "lint": "backstage-cli lint",
     "test:e2e": "cross-env PORT=3001 start-server-and-test start http://localhost:3001 cy:dev",
     "test:e2e:ci": "cross-env PORT=3001 start-server-and-test start http://localhost:3001 cy:run",
+    "lint": "backstage-cli lint",
     "cy:dev": "cypress open",
@@ -63,3 +72,6 @@
     ]
-  }
+  },
+  "files": [
+    "dist"
+  ]
 }
diff --git a/packages/app/public/index.html b/packages/app/public/index.html
index ea9208c..a936c73 100644
--- a/packages/app/public/index.html
+++ b/packages/app/public/index.html
@@ -44,10 +44,23 @@
     />
-    <style>
-      #root {
-        min-height: 100%;
+    <title><%= config.getString('app.title') %></title>
+    <% if (config.has('app.googleAnalyticsTrackingId')) { %>
+    <script
+      async
+      src="https://www.googletagmanager.com/gtag/js?id=<%= config.getString('app.googleAnalyticsTrackingId') %>"
+    ></script>
+    <script>
+      window.dataLayer = window.dataLayer || [];
+      function gtag() {
+        dataLayer.push(arguments);
       }
-    </style>
-    <title><%= app.title %></title>
+      gtag('js', new Date());
+
+      gtag(
+        'config',
+        '<%= config.getString("app.googleAnalyticsTrackingId") %>',
+      );
+    </script>
+    <% } %>
   </head>
-  <body style="margin: 0;">
+  <body>
     <noscript>You need to enable JavaScript to run this app.</noscript>
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index 21a2eaa..b94cac7 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -6,5 +6,5 @@ describe('App', () => {
   it('should render', async () => {
-    Object.defineProperty(process.env, 'APP_CONFIG', {
-      configurable: true,
-      value: [
+    process.env = {
+      NODE_ENV: 'test',
+      APP_CONFIG: [
         {
@@ -12,5 +12,5 @@ describe('App', () => {
             app: { title: 'Test' },
-            backend: { baseUrl: 'http://localhost:7000' },
+            backend: { baseUrl: 'http://localhost:7007' },
             techdocs: {
-              storageUrl: 'http://localhost:7000/api/techdocs/static/docs',
+              storageUrl: 'http://localhost:7007/api/techdocs/static/docs',
             },
@@ -19,4 +19,4 @@ describe('App', () => {
         },
-      ],
-    });
+      ] as any,
+    };
 
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index 9449ac6..9b65186 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -1,19 +1,35 @@
-import React, { FC } from 'react';
+import React from 'react';
+import { Navigate, Route } from 'react-router';
+import { apiDocsPlugin, ApiExplorerPage } from '@backstage/plugin-api-docs';
 import {
-  createApp,
-  AlertDisplay,
-  OAuthRequestDialog,
-  SidebarPage,
-  createRouteRef,
-} from '@backstage/core';
+  CatalogEntityPage,
+  CatalogIndexPage,
+  catalogPlugin,
+} from '@backstage/plugin-catalog';
+import {
+  CatalogImportPage,
+  catalogImportPlugin,
+} from '@backstage/plugin-catalog-import';
+import { ScaffolderPage, scaffolderPlugin } from '@backstage/plugin-scaffolder';
+import { orgPlugin } from '@backstage/plugin-org';
+import { SearchPage } from '@backstage/plugin-search';
+import { TechRadarPage } from '@backstage/plugin-tech-radar';
+import {
+  DefaultTechDocsHome,
+  TechDocsIndexPage,
+  techdocsPlugin,
+  TechDocsReaderPage,
+} from '@backstage/plugin-techdocs';
+import { UserSettingsPage } from '@backstage/plugin-user-settings';
 import { apis } from './apis';
-import * as plugins from './plugins';
-import { AppSidebar } from './sidebar';
-import { Route, Routes, Navigate } from 'react-router';
-import { Router as CatalogRouter } from '@backstage/plugin-catalog';
-import { Router as DocsRouter } from '@backstage/plugin-techdocs';
-import { Router as RegisterComponentRouter } from '@backstage/plugin-register-component';
-import { Router as TechRadarRouter } from '@backstage/plugin-tech-radar';
+import { entityPage } from './components/catalog/EntityPage';
+import { searchPage } from './components/search/SearchPage';
+import { Root } from './components/Root';
 
-import { EntityPage } from './components/catalog/EntityPage';
+import { AlertDisplay, OAuthRequestDialog } from '@backstage/core-components';
+import { createApp } from '@backstage/app-defaults';
+import { FlatRoutes } from '@backstage/core-app-api';
+import { CatalogGraphPage } from '@backstage/plugin-catalog-graph';
+import { PermissionedRoute } from '@backstage/plugin-permission-react';
+import { catalogEntityCreatePermission } from '@backstage/plugin-catalog-common';
 
@@ -21,3 +37,17 @@ const app = createApp({
   apis,
-  plugins: Object.values(plugins),
+  bindRoutes({ bind }) {
+    bind(catalogPlugin.externalRoutes, {
+      createComponent: scaffolderPlugin.routes.root,
+      viewTechDoc: techdocsPlugin.routes.docRoot,
+    });
+    bind(apiDocsPlugin.externalRoutes, {
+      registerApi: catalogImportPlugin.routes.importPage,
+    });
+    bind(scaffolderPlugin.externalRoutes, {
+      registerComponent: catalogImportPlugin.routes.importPage,
+    });
+    bind(orgPlugin.externalRoutes, {
+      catalogIndex: catalogPlugin.routes.catalogIndex,
+    });
+  },
 });
@@ -26,11 +56,40 @@ const AppProvider = app.getProvider();
 const AppRouter = app.getRouter();
-const deprecatedAppRoutes = app.getRoutes();
-
-const catalogRouteRef = createRouteRef({
-  path: '/catalog',
-  title: 'Service Catalog',
-});
 
+const routes = (
+  <FlatRoutes>
+    <Navigate key="/" to="catalog" />
+    <Route path="/catalog" element={<CatalogIndexPage />} />
+    <Route
+      path="/catalog/:namespace/:kind/:name"
+      element={<CatalogEntityPage />}
+    >
+      {entityPage}
+    </Route>
+    <Route path="/docs" element={<TechDocsIndexPage />}>
+      <DefaultTechDocsHome />
+    </Route>
+    <Route
+      path="/docs/:namespace/:kind/:name/*"
+      element={<TechDocsReaderPage />}
+    />
+    <Route path="/create" element={<ScaffolderPage />} />
+    <Route path="/api-docs" element={<ApiExplorerPage />} />
+    <Route
+      path="/tech-radar"
+      element={<TechRadarPage width={1500} height={800} />}
+    />
+    <PermissionedRoute
+      path="/catalog-import"
+      permission={catalogEntityCreatePermission}
+      element={<CatalogImportPage />}
+    />
+    <Route path="/search" element={<SearchPage />}>
+      {searchPage}
+    </Route>
+    <Route path="/settings" element={<UserSettingsPage />} />
+    <Route path="/catalog-graph" element={<CatalogGraphPage />} />
+  </FlatRoutes>
+);
 
-const App: FC<{}> = () => (
+const App = () => (
   <AppProvider>
@@ -39,22 +98,3 @@ const App: FC<{}> = () => (
     <AppRouter>
-      <SidebarPage>
-        <AppSidebar />
-        <Routes>
-          <Navigate key="/" to="/catalog" />
-          <Route
-            path="/catalog/*"
-            element={<CatalogRouter EntityPage={EntityPage} />}
-          />
-          <Route path="/docs/*" element={<DocsRouter />} />
-          <Route
-            path="/tech-radar"
-            element={<TechRadarRouter width={1500} height={800} />}
-          />
-          <Route
-            path="/register-component"
-            element={<RegisterComponentRouter catalogRouteRef={catalogRouteRef} />}
-          />
-          {deprecatedAppRoutes}
-        </Routes>
-      </SidebarPage>
+      <Root>{routes}</Root>
     </AppRouter>
diff --git a/packages/app/src/apis.ts b/packages/app/src/apis.ts
index 24b22a8..c89753a 100644
--- a/packages/app/src/apis.ts
+++ b/packages/app/src/apis.ts
@@ -1 +1,19 @@
-export const apis = [];
+import {
+  ScmIntegrationsApi,
+  scmIntegrationsApiRef,
+  ScmAuth,
+} from '@backstage/integration-react';
+import {
+  AnyApiFactory,
+  configApiRef,
+  createApiFactory,
+} from '@backstage/core-plugin-api';
+
+export const apis: AnyApiFactory[] = [
+  createApiFactory({
+    api: scmIntegrationsApiRef,
+    deps: { configApi: configApiRef },
+    factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi),
+  }),
+  ScmAuth.createDefaultApiFactory(),
+];
diff --git a/packages/app/src/LogoFull.tsx b/packages/app/src/components/Root/LogoFull.tsx
similarity index 99%
rename from packages/app/src/LogoFull.tsx
rename to packages/app/src/components/Root/LogoFull.tsx
index d2b1bf1..c7b1c84 100644
--- a/packages/app/src/LogoFull.tsx
+++ b/packages/app/src/components/Root/LogoFull.tsx
@@ -1,3 +1,3 @@
 /*
- * Copyright 2020 Spotify AB
+ * Copyright 2020 The Backstage Authors
  *
@@ -16,3 +16,3 @@
 
-import React, { FC } from 'react';
+import React from 'react';
 import { makeStyles } from '@material-ui/core';
@@ -28,3 +28,3 @@ const useStyles = makeStyles({
 });
-const LogoFull: FC<{}> = () => {
+const LogoFull = () => {
   const classes = useStyles();
diff --git a/packages/app/src/LogoIcon.tsx b/packages/app/src/components/Root/LogoIcon.tsx
similarity index 97%
rename from packages/app/src/LogoIcon.tsx
rename to packages/app/src/components/Root/LogoIcon.tsx
index d70be3d..073cf6e 100644
--- a/packages/app/src/LogoIcon.tsx
+++ b/packages/app/src/components/Root/LogoIcon.tsx
@@ -1,3 +1,3 @@
 /*
- * Copyright 2020 Spotify AB
+ * Copyright 2020 The Backstage Authors
  *
@@ -16,3 +16,3 @@
 
-import React, { FC } from 'react';
+import React from 'react';
 import { makeStyles } from '@material-ui/core';
@@ -29,3 +29,3 @@ const useStyles = makeStyles({
 
-const LogoIcon: FC<{}> = () => {
+const LogoIcon = () => {
   const classes = useStyles();
diff --git a/packages/app/src/components/Root/Root.tsx b/packages/app/src/components/Root/Root.tsx
new file mode 100644
index 0000000..7e98c7d
--- /dev/null
+++ b/packages/app/src/components/Root/Root.tsx
@@ -0,0 +1,116 @@
+/*
+ * Copyright 2020 The Backstage Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import React, { useContext, PropsWithChildren } from 'react';
+import { Link, makeStyles } from '@material-ui/core';
+import HomeIcon from '@material-ui/icons/Home';
+import ExtensionIcon from '@material-ui/icons/Extension';
+import MapIcon from '@material-ui/icons/MyLocation';
+import LibraryBooks from '@material-ui/icons/LibraryBooks';
+import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
+import LogoFull from './LogoFull';
+import LogoIcon from './LogoIcon';
+import { NavLink } from 'react-router-dom';
+import {
+  Settings as SidebarSettings,
+  UserSettingsSignInAvatar,
+} from '@backstage/plugin-user-settings';
+import {
+  SidebarSearchModal,
+  SearchContextProvider,
+} from '@backstage/plugin-search';
+import {
+  Sidebar,
+  sidebarConfig,
+  SidebarContext,
+  SidebarDivider,
+  SidebarGroup,
+  SidebarItem,
+  SidebarPage,
+  SidebarScrollWrapper,
+  SidebarSpace,
+} from '@backstage/core-components';
+import MenuIcon from '@material-ui/icons/Menu';
+import SearchIcon from '@material-ui/icons/Search';
+
+const useSidebarLogoStyles = makeStyles({
+  root: {
+    width: sidebarConfig.drawerWidthClosed,
+    height: 3 * sidebarConfig.logoHeight,
+    display: 'flex',
+    flexFlow: 'row nowrap',
+    alignItems: 'center',
+    marginBottom: -14,
+  },
+  link: {
+    width: sidebarConfig.drawerWidthClosed,
+    marginLeft: 24,
+  },
+});
+
+const SidebarLogo = () => {
+  const classes = useSidebarLogoStyles();
+  const { isOpen } = useContext(SidebarContext);
+
+  return (
+    <div className={classes.root}>
+      <Link
+        component={NavLink}
+        to="/"
+        underline="none"
+        className={classes.link}
+      >
+        {isOpen ? <LogoFull /> : <LogoIcon />}
+      </Link>
+    </div>
+  );
+};
+
+export const Root = ({ children }: PropsWithChildren<{}>) => (
+  <SidebarPage>
+    <Sidebar>
+      <SidebarLogo />
+      <SidebarGroup label="Search" icon={<SearchIcon />} to="/search">
+        <SearchContextProvider>
+          <SidebarSearchModal />
+        </SearchContextProvider>{' '}
+      </SidebarGroup>
+      <SidebarDivider />
+      <SidebarGroup label="Menu" icon={<MenuIcon />}>
+        {/* Global nav, not org-specific */}
+        <SidebarItem icon={HomeIcon} to="catalog" text="Home" />
+        <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
+        <SidebarItem icon={LibraryBooks} to="docs" text="Docs" />
+        <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
+        {/* End global nav */}
+        <SidebarDivider />
+        <SidebarScrollWrapper>
+          <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
+        </SidebarScrollWrapper>
+      </SidebarGroup>
+      <SidebarSpace />
+      <SidebarDivider />
+      <SidebarGroup
+        label="Settings"
+        icon={<UserSettingsSignInAvatar />}
+        to="/settings"
+      >
+        <SidebarSettings />
+      </SidebarGroup>
+    </Sidebar>
+    {children}
+  </SidebarPage>
+);
diff --git a/packages/app/src/components/Root/index.ts b/packages/app/src/components/Root/index.ts
new file mode 100644
index 0000000..dff706f
--- /dev/null
+++ b/packages/app/src/components/Root/index.ts
@@ -0,0 +1,17 @@
+/*
+ * Copyright 2020 The Backstage Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+export { Root } from './Root';
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index 7d65b32..84d0944 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -1,3 +1,3 @@
 /*
- * Copyright 2020 Spotify AB
+ * Copyright 2020 The Backstage Authors
  *
@@ -15,45 +15,119 @@
  */
+import React from 'react';
+import { Button, Grid } from '@material-ui/core';
+import {
+  EntityApiDefinitionCard,
+  EntityConsumedApisCard,
+  EntityConsumingComponentsCard,
+  EntityHasApisCard,
+  EntityProvidedApisCard,
+  EntityProvidingComponentsCard,
+} from '@backstage/plugin-api-docs';
+import {
+  EntityAboutCard,
+  EntityDependsOnComponentsCard,
+  EntityDependsOnResourcesCard,
+  EntityHasComponentsCard,
+  EntityHasResourcesCard,
+  EntityHasSubcomponentsCard,
+  EntityHasSystemsCard,
+  EntityLayout,
+  EntityLinksCard,
+  EntitySwitch,
+  EntityOrphanWarning,
+  EntityProcessingErrorsPanel,
+  isComponentType,
+  isKind,
+  hasCatalogProcessingErrors,
+  isOrphan,
+} from '@backstage/plugin-catalog';
 import {
-  Router as GitHubActionsRouter,
-  isPluginApplicableToEntity as isGitHubActionsAvailable,
+  isGithubActionsAvailable,
+  EntityGithubActionsContent,
 } from '@backstage/plugin-github-actions';
 import {
-  Router as CircleCIRouter,
-  isPluginApplicableToEntity as isCircleCIAvailable,
-} from '@backstage/plugin-circleci';
-import { Router as ApiDocsRouter } from '@backstage/plugin-api-docs';
-import { EmbeddedDocsRouter as DocsRouter } from '@backstage/plugin-techdocs';
-
-import React from 'react';
+  EntityUserProfileCard,
+  EntityGroupProfileCard,
+  EntityMembersListCard,
+  EntityOwnershipCard,
+} from '@backstage/plugin-org';
+import { EntityTechdocsContent } from '@backstage/plugin-techdocs';
+import { EmptyState } from '@backstage/core-components';
 import {
-  EntityPageLayout,
-  useEntity,
-  AboutCard,
-} from '@backstage/plugin-catalog';
-import { Entity } from '@backstage/catalog-model';
-import { Grid } from '@material-ui/core';
-import { WarningPanel } from '@backstage/core';
+  Direction,
+  EntityCatalogGraphCard,
+} from '@backstage/plugin-catalog-graph';
+import {
+  RELATION_API_CONSUMED_BY,
+  RELATION_API_PROVIDED_BY,
+  RELATION_CONSUMES_API,
+  RELATION_DEPENDENCY_OF,
+  RELATION_DEPENDS_ON,
+  RELATION_HAS_PART,
+  RELATION_PART_OF,
+  RELATION_PROVIDES_API,
+} from '@backstage/catalog-model';
 
-const CICDSwitcher = ({ entity }: { entity: Entity }) => {
-  // This component is just an example of how you can implement your company's logic in entity page.
+const cicdContent = (
+  // This is an example of how you can implement your company's logic in entity page.
   // You can for example enforce that all components of type 'service' should use GitHubActions
-  switch (true) {
-    case isGitHubActionsAvailable(entity):
-      return <GitHubActionsRouter entity={entity} />;
-    case isCircleCIAvailable(entity):
-      return <CircleCIRouter entity={entity} />;
-    default:
-      return (
-        <WarningPanel title="CI/CD switcher:">
-          No CI/CD is available for this entity. Check corresponding
-          annotations!
-        </WarningPanel>
-      );
-  }
-};
-
-const OverviewContent = ({ entity }: { entity: Entity }) => (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isGithubActionsAvailable}>
+      <EntityGithubActionsContent />
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case>
+      <EmptyState
+        title="No CI/CD available for this entity"
+        missing="info"
+        description="You need to add an annotation to your component if you want to enable CI/CD for it. You can read more about annotations in Backstage by clicking the button below."
+        action={
+          <Button
+            variant="contained"
+            color="primary"
+            href="https://backstage.io/docs/features/software-catalog/well-known-annotations"
+          >
+            Read more
+          </Button>
+        }
+      />
+    </EntitySwitch.Case>
+  </EntitySwitch>
+);
+
+const entityWarningContent = (
+  <>
+    <EntitySwitch>
+      <EntitySwitch.Case if={isOrphan}>
+        <Grid item xs={12}>
+          <EntityOrphanWarning />
+        </Grid>
+      </EntitySwitch.Case>
+    </EntitySwitch>
+
+    <EntitySwitch>
+      <EntitySwitch.Case if={hasCatalogProcessingErrors}>
+        <Grid item xs={12}>
+          <EntityProcessingErrorsPanel />
+        </Grid>
+      </EntitySwitch.Case>
+    </EntitySwitch>
+  </>
+);
+
+const overviewContent = (
   <Grid container spacing={3} alignItems="stretch">
-    <Grid item>
-      <AboutCard entity={entity} variant="gridItem" />
+    {entityWarningContent}
+    <Grid item md={6}>
+      <EntityAboutCard variant="gridItem" />
+    </Grid>
+    <Grid item md={6} xs={12}>
+      <EntityCatalogGraphCard variant="gridItem" height={400} />
+    </Grid>
+
+    <Grid item md={4} xs={12}>
+      <EntityLinksCard />
+    </Grid>
+    <Grid item md={8} xs={12}>
+      <EntityHasSubcomponentsCard variant="gridItem" />
     </Grid>
@@ -62,72 +136,244 @@ const OverviewContent = ({ entity }: { entity: Entity }) => (
 
-const ServiceEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/ci-cd/*"
-      title="CI/CD"
-      element={<CICDSwitcher entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/api/*"
-      title="API"
-      element={<ApiDocsRouter entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const serviceEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/ci-cd" title="CI/CD">
+      {cicdContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/api" title="API">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityProvidedApisCard />
+        </Grid>
+        <Grid item md={6}>
+          <EntityConsumedApisCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/dependencies" title="Dependencies">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityDependsOnComponentsCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityDependsOnResourcesCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const WebsiteEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/ci-cd/*"
-      title="CI/CD"
-      element={<CICDSwitcher entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const websiteEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/ci-cd" title="CI/CD">
+      {cicdContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/dependencies" title="Dependencies">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityDependsOnComponentsCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityDependsOnResourcesCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+/**
+ * NOTE: This page is designed to work on small screens such as mobile devices.
+ * This is based on Material UI Grid. If breakpoints are used, each grid item must set the `xs` prop to a column size or to `true`,
+ * since this does not default. If no breakpoints are used, the items will equitably share the available space.
+ * https://material-ui.com/components/grid/#basic-grid.
+ */
+
+const defaultEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+const componentPage = (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isComponentType('service')}>
+      {serviceEntityPage}
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case if={isComponentType('website')}>
+      {websiteEntityPage}
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+  </EntitySwitch>
 );
 
-const DefaultEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/*"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const apiPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        {entityWarningContent}
+        <Grid item md={6}>
+          <EntityAboutCard />
+        </Grid>
+        <Grid item md={6} xs={12}>
+          <EntityCatalogGraphCard variant="gridItem" height={400} />
+        </Grid>
+        <Grid item md={4} xs={12}>
+          <EntityLinksCard />
+        </Grid>
+        <Grid container item md={12}>
+          <Grid item md={6}>
+            <EntityProvidingComponentsCard />
+          </Grid>
+          <Grid item md={6}>
+            <EntityConsumingComponentsCard />
+          </Grid>
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/definition" title="Definition">
+      <Grid container spacing={3}>
+        <Grid item xs={12}>
+          <EntityApiDefinitionCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+const userPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        {entityWarningContent}
+        <Grid item xs={12} md={6}>
+          <EntityUserProfileCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityOwnershipCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-export const EntityPage = () => {
-  const { entity } = useEntity();
-  switch (entity?.spec?.type) {
-    case 'service':
-      return <ServiceEntityPage entity={entity} />;
-    case 'website':
-      return <WebsiteEntityPage entity={entity} />;
-    default:
-      return <DefaultEntityPage entity={entity} />;
-  }
-};
+const groupPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        {entityWarningContent}
+        <Grid item xs={12} md={6}>
+          <EntityGroupProfileCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityOwnershipCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12}>
+          <EntityMembersListCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+const systemPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3} alignItems="stretch">
+        {entityWarningContent}
+        <Grid item md={6}>
+          <EntityAboutCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6} xs={12}>
+          <EntityCatalogGraphCard variant="gridItem" height={400} />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasComponentsCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasApisCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasResourcesCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+    <EntityLayout.Route path="/diagram" title="Diagram">
+      <EntityCatalogGraphCard
+        variant="gridItem"
+        direction={Direction.TOP_BOTTOM}
+        title="System Diagram"
+        height={700}
+        relations={[
+          RELATION_PART_OF,
+          RELATION_HAS_PART,
+          RELATION_API_CONSUMED_BY,
+          RELATION_API_PROVIDED_BY,
+          RELATION_CONSUMES_API,
+          RELATION_PROVIDES_API,
+          RELATION_DEPENDENCY_OF,
+          RELATION_DEPENDS_ON,
+        ]}
+        unidirectional={false}
+      />
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+const domainPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3} alignItems="stretch">
+        {entityWarningContent}
+        <Grid item md={6}>
+          <EntityAboutCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6} xs={12}>
+          <EntityCatalogGraphCard variant="gridItem" height={400} />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasSystemsCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+export const entityPage = (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isKind('component')} children={componentPage} />
+    <EntitySwitch.Case if={isKind('api')} children={apiPage} />
+    <EntitySwitch.Case if={isKind('group')} children={groupPage} />
+    <EntitySwitch.Case if={isKind('user')} children={userPage} />
+    <EntitySwitch.Case if={isKind('system')} children={systemPage} />
+    <EntitySwitch.Case if={isKind('domain')} children={domainPage} />
+
+    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+  </EntitySwitch>
+);
diff --git a/packages/app/src/components/search/SearchPage.tsx b/packages/app/src/components/search/SearchPage.tsx
new file mode 100644
index 0000000..a88e725
--- /dev/null
+++ b/packages/app/src/components/search/SearchPage.tsx
@@ -0,0 +1,150 @@
+import React from 'react';
+import { makeStyles, Theme, Grid, List, Paper } from '@material-ui/core';
+
+import { CatalogResultListItem } from '@backstage/plugin-catalog';
+import {
+  catalogApiRef,
+  CATALOG_FILTER_EXISTS,
+} from '@backstage/plugin-catalog-react';
+import { DocsResultListItem } from '@backstage/plugin-techdocs';
+
+import {
+  SearchBar,
+  SearchFilter,
+  SearchResult,
+  SearchType,
+  DefaultResultListItem,
+  useSearch,
+} from '@backstage/plugin-search';
+import {
+  CatalogIcon,
+  Content,
+  DocsIcon,
+  Header,
+  Page,
+} from '@backstage/core-components';
+import { useApi } from '@backstage/core-plugin-api';
+
+const useStyles = makeStyles((theme: Theme) => ({
+  bar: {
+    padding: theme.spacing(1, 0),
+  },
+  filters: {
+    padding: theme.spacing(2),
+    marginTop: theme.spacing(2),
+  },
+  filter: {
+    '& + &': {
+      marginTop: theme.spacing(2.5),
+    },
+  },
+}));
+
+const SearchPage = () => {
+  const classes = useStyles();
+  const { types } = useSearch();
+  const catalogApi = useApi(catalogApiRef);
+
+  return (
+    <Page themeId="home">
+      <Header title="Search" />
+      <Content>
+        <Grid container direction="row">
+          <Grid item xs={12}>
+            <Paper className={classes.bar}>
+              <SearchBar />
+            </Paper>
+          </Grid>
+          <Grid item xs={3}>
+            <SearchType.Accordion
+              name="Result Type"
+              defaultValue="software-catalog"
+              types={[
+                {
+                  value: 'software-catalog',
+                  name: 'Software Catalog',
+                  icon: <CatalogIcon />,
+                },
+                {
+                  value: 'techdocs',
+                  name: 'Documentation',
+                  icon: <DocsIcon />,
+                },
+              ]}
+            />
+            <Paper className={classes.filters}>
+              {types.includes('techdocs') && (
+                <SearchFilter.Select
+                  className={classes.filter}
+                  label="Entity"
+                  name="name"
+                  values={async () => {
+                    // Return a list of entities which are documented.
+                    const { items } = await catalogApi.getEntities({
+                      fields: ['metadata.name'],
+                      filter: {
+                        'metadata.annotations.backstage.io/techdocs-ref':
+                          CATALOG_FILTER_EXISTS,
+                      },
+                    });
+
+                    const names = items.map(entity => entity.metadata.name);
+                    names.sort();
+                    return names;
+                  }}
+                />
+              )}
+              <SearchFilter.Select
+                className={classes.filter}
+                label="Kind"
+                name="kind"
+                values={['Component', 'Template']}
+              />
+              <SearchFilter.Checkbox
+                className={classes.filter}
+                label="Lifecycle"
+                name="lifecycle"
+                values={['experimental', 'production']}
+              />
+            </Paper>
+          </Grid>
+          <Grid item xs={9}>
+            <SearchResult>
+              {({ results }) => (
+                <List>
+                  {results.map(({ type, document }) => {
+                    switch (type) {
+                      case 'software-catalog':
+                        return (
+                          <CatalogResultListItem
+                            key={document.location}
+                            result={document}
+                          />
+                        );
+                      case 'techdocs':
+                        return (
+                          <DocsResultListItem
+                            key={document.location}
+                            result={document}
+                          />
+                        );
+                      default:
+                        return (
+                          <DefaultResultListItem
+                            key={document.location}
+                            result={document}
+                          />
+                        );
+                    }
+                  })}
+                </List>
+              )}
+            </SearchResult>
+          </Grid>
+        </Grid>
+      </Content>
+    </Page>
+  );
+};
+
+export const searchPage = <SearchPage />;
diff --git a/packages/app/src/plugins.ts b/packages/app/src/plugins.ts
deleted file mode 100644
index 9eabff0..0000000
--- a/packages/app/src/plugins.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-export { plugin as ApiDocs } from '@backstage/plugin-api-docs';
-export { plugin as CatalogPlugin } from '@backstage/plugin-catalog';
-export { plugin as RegisterComponent } from '@backstage/plugin-register-component';
-export { plugin as ScaffolderPlugin } from '@backstage/plugin-scaffolder';
-export { plugin as TechDocsPlugin } from '@backstage/plugin-techdocs';
-export { plugin as Circleci } from '@backstage/plugin-circleci';
-export { plugin as LighthousePlugin } from '@backstage/plugin-lighthouse';
-export { plugin as TechRadar } from '@backstage/plugin-tech-radar';
-export { plugin as GithubActions } from '@backstage/plugin-github-actions';
diff --git a/packages/app/src/sidebar.tsx b/packages/app/src/sidebar.tsx
deleted file mode 100644
index b5425b6..0000000
--- a/packages/app/src/sidebar.tsx
+++ /dev/null
@@ -1,76 +0,0 @@
-import React, { FC, useContext } from 'react';
-import HomeIcon from '@material-ui/icons/Home';
-import LibraryBooks from '@material-ui/icons/LibraryBooks';
-import ExtensionIcon from '@material-ui/icons/Extension';
-import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
-import BuildIcon from '@material-ui/icons/BuildRounded';
-import RuleIcon from '@material-ui/icons/AssignmentTurnedIn';
-import MapIcon from '@material-ui/icons/MyLocation';
-import { Link, makeStyles } from '@material-ui/core';
-import { NavLink } from 'react-router-dom';
-import LogoFull from './LogoFull';
-import LogoIcon from './LogoIcon';
-import { Settings as SidebarSettings } from '@backstage/plugin-user-settings';
-
-import {
-  Sidebar,
-  SidebarItem,
-  SidebarDivider,
-  sidebarConfig,
-  SidebarContext,
-  SidebarSpace,
-} from '@backstage/core';
-
-export const AppSidebar = () => (
-  <Sidebar>
-    <SidebarLogo />
-    <SidebarDivider />
-    {/* Global nav, not org-specific */}
-    <SidebarItem icon={HomeIcon} to="./" text="Home" />
-    <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
-    <SidebarItem icon={LibraryBooks} to="/docs" text="Docs" />
-    <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
-    <SidebarDivider />
-    <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
-    <SidebarItem icon={RuleIcon} to="lighthouse" text="Lighthouse" />
-    <SidebarItem icon={BuildIcon} to="circleci" text="CircleCI" />
-    {/* End global nav */}
-    <SidebarDivider />
-    <SidebarSpace />
-    <SidebarDivider />
-    <SidebarSettings />
-  </Sidebar>
-);
-
-const useSidebarLogoStyles = makeStyles({
-  root: {
-    width: sidebarConfig.drawerWidthClosed,
-    height: 3 * sidebarConfig.logoHeight,
-    display: 'flex',
-    flexFlow: 'row nowrap',
-    alignItems: 'center',
-    marginBottom: -14,
-  },
-  link: {
-    width: sidebarConfig.drawerWidthClosed,
-    marginLeft: 24,
-  },
-});
-
-const SidebarLogo: FC<{}> = () => {
-  const classes = useSidebarLogoStyles();
-  const { isOpen } = useContext(SidebarContext);
-
-  return (
-    <div className={classes.root}>
-      <Link
-        component={NavLink}
-        to="/"
-        underline="none"
-        className={classes.link}
-      >
-        {isOpen ? <LogoFull /> : <LogoIcon />}
-      </Link>
-    </div>
-  );
-};
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index 5051471..31231a3 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -1,4 +1,15 @@
-FROM node:12-buster
+# This dockerfile builds an image for the backend package.
+# It should be executed with the root of the repo as docker context.
+#
+# Before building this image, be sure to have run the following commands in the repo root:
+#
+# yarn install
+# yarn tsc
+# yarn build
+#
+# Once the commands have been run, you can build the image using `yarn build-image`
 
-WORKDIR /usr/src/app
+FROM node:14-buster-slim
+
+WORKDIR /app
 
@@ -7,3 +18,4 @@ WORKDIR /usr/src/app
 # and along with yarn.lock and the root package.json, that's enough to run yarn install.
-ADD yarn.lock package.json skeleton.tar ./
+COPY yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./
+RUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz
 
@@ -11,6 +23,6 @@ RUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -
 
-# This will copy the contents of the dist-workspace when running the build-image command.
-# Do not use this Dockerfile outside of that command, as it will copy in the source code instead.
-COPY . .
+# Then copy the rest of the backend bundle, along with any other files we might want.
+COPY packages/backend/dist/bundle.tar.gz app-config.yaml ./
+RUN tar xzf bundle.tar.gz && rm bundle.tar.gz
 
-CMD ["node", "packages/backend", "--config", "app-config.yaml", "--config", "app-config.production.yaml"]
+CMD ["node", "packages/backend", "--config", "app-config.yaml"]
diff --git a/packages/backend/README.md b/packages/backend/README.md
index 81e0f80..02426ef 100644
--- a/packages/backend/README.md
+++ b/packages/backend/README.md
@@ -38,3 +38,3 @@ the backend without using the auth or sentry features.
 
-The backend starts up on port 7000 per default.
+The backend starts up on port 7007 per default.
 
diff --git a/packages/backend/package.json b/packages/backend/package.json
index c8e3a09..72f911d 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -6,8 +6,5 @@
   "private": true,
-  "engines": {
-    "node": "12 || 14"
-  },
   "scripts": {
-    "build": "backstage-cli backend:build",
-    "build-image": "backstage-cli backend:build-image --build --tag backstage",
+    "build": "backstage-cli backend:bundle",
+    "build-image": "docker build ../.. -f Dockerfile --tag backstage",
     "start": "backstage-cli backend:dev",
@@ -19,19 +16,25 @@
   "dependencies": {
-    "app": "0.0.0",
-    "@backstage/backend-common": "^0.3.3",
-    "@backstage/catalog-model": "^0.4.0",
-    "@backstage/config": "^0.1.1",
-    "@backstage/plugin-app-backend": "^0.3.2",
-    "@backstage/plugin-auth-backend": "^0.2.5",
-    "@backstage/plugin-catalog-backend": "^0.3.0",
-    "@backstage/plugin-proxy-backend": "^0.2.2",
-    "@backstage/plugin-scaffolder-backend": "^0.3.3",
-    "@backstage/plugin-techdocs-backend": "^0.3.1",
-    "@octokit/rest": "^18.0.0",
-    "@gitbeaker/node": "^25.2.0",
-    "dockerode": "^3.2.0",
+    "app": "link:../app",
+    "@backstage/backend-common": "^0.10.7",
+    "@backstage/backend-tasks": "^0.1.6",
+    "@backstage/catalog-model": "^0.9.10",
+    "@backstage/catalog-client": "^0.6.0",
+    "@backstage/config": "^0.1.13",
+    "@backstage/plugin-app-backend": "^0.3.24",
+    "@backstage/plugin-auth-backend": "^0.10.0",
+    "@backstage/plugin-catalog-backend": "^0.21.3",
+    "@backstage/plugin-permission-common": "^0.4.0",
+    "@backstage/plugin-permission-node": "^0.4.3",
+    "@backstage/plugin-proxy-backend": "^0.2.18",
+    "@backstage/plugin-scaffolder-backend": "^0.15.24",
+    "@backstage/plugin-search-backend": "^0.4.2",
+    "@backstage/plugin-search-backend-node": "^0.4.5",
+    "@backstage/plugin-techdocs-backend": "^0.13.3",
+    "@gitbeaker/node": "^34.6.0",
+    "@octokit/rest": "^18.5.3",
+    "dockerode": "^3.3.1",
     "express": "^4.17.1",
-    "express-promise-router": "^3.0.3",
+    "express-promise-router": "^4.1.0",
     "knex": "^0.21.6",
-    "sqlite3": "^4.2.0",
+    "@vscode/sqlite3": "^5.0.7",
     "winston": "^3.2.1"
@@ -39,8 +42,10 @@
   "devDependencies": {
-    "@backstage/cli": "^0.4.0",
-    "@types/dockerode": "^2.5.32",
+    "@backstage/cli": "^0.13.2",
+    "@types/dockerode": "^3.3.0",
     "@types/express": "^4.17.6",
-    "@types/express-serve-static-core": "^4.17.5",
-    "@types/helmet": "^0.0.47"
-  }
+    "@types/express-serve-static-core": "^4.17.5"
+  },
+  "files": [
+    "dist"
+  ]
 }
diff --git a/packages/backend/src/index.ts b/packages/backend/src/index.ts
index 80dc623..70bc66b 100644
--- a/packages/backend/src/index.ts
+++ b/packages/backend/src/index.ts
@@ -15,6 +15,9 @@ import {
   notFoundHandler,
-  SingleConnectionDatabaseManager,
+  CacheManager,
+  DatabaseManager,
   SingleHostDiscovery,
   UrlReaders,
+  ServerTokenManager,
 } from '@backstage/backend-common';
+import { TaskScheduler } from '@backstage/backend-tasks';
 import { Config } from '@backstage/config';
@@ -26,3 +29,5 @@ import proxy from './plugins/proxy';
 import techdocs from './plugins/techdocs';
+import search from './plugins/search';
 import { PluginEnvironment } from './types';
+import { ServerPermissionClient } from '@backstage/plugin-permission-node';
 
@@ -32,2 +37,10 @@ function makeCreateEnv(config: Config) {
   const discovery = SingleHostDiscovery.fromConfig(config);
+  const cacheManager = CacheManager.fromConfig(config);
+  const databaseManager = DatabaseManager.fromConfig(config);
+  const tokenManager = ServerTokenManager.noop();
+  const taskScheduler = TaskScheduler.fromConfig(config);
+  const permissions = ServerPermissionClient.fromConfig(config, {
+    discovery,
+    tokenManager,
+  });
 
@@ -35,4 +48,2 @@ function makeCreateEnv(config: Config) {
 
-  const databaseManager = SingleConnectionDatabaseManager.fromConfig(config);
-
   return (plugin: string): PluginEnvironment => {
@@ -40,3 +51,15 @@ function makeCreateEnv(config: Config) {
     const database = databaseManager.forPlugin(plugin);
-    return { logger, database, config, reader, discovery };
+    const cache = cacheManager.forPlugin(plugin);
+    const scheduler = taskScheduler.forPlugin(plugin);
+    return {
+      logger,
+      database,
+      cache,
+      config,
+      reader,
+      discovery,
+      tokenManager,
+      scheduler,
+      permissions,
+    };
   };
@@ -56,2 +79,3 @@ async function main() {
   const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));
+  const searchEnv = useHotMemoize(module, () => createEnv('search'));
   const appEnv = useHotMemoize(module, () => createEnv('app'));
@@ -64,2 +88,5 @@ async function main() {
   apiRouter.use('/proxy', await proxy(proxyEnv));
+  apiRouter.use('/search', await search(searchEnv));
+
+  // Add backends ABOVE this line; this 404 handler is the catch-all fallback
   apiRouter.use(notFoundHandler());
diff --git a/packages/backend/src/plugins/app.ts b/packages/backend/src/plugins/app.ts
index 5131694..14e19a1 100644
--- a/packages/backend/src/plugins/app.ts
+++ b/packages/backend/src/plugins/app.ts
@@ -1,2 +1,3 @@
 import { createRouter } from '@backstage/plugin-app-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -6,3 +7,4 @@ export default async function createPlugin({
   config,
-}: PluginEnvironment) {
+  database,
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({
@@ -10,2 +12,3 @@ export default async function createPlugin({
     config,
+    database,
     appPackageName: 'app',
diff --git a/packages/backend/src/plugins/auth.ts b/packages/backend/src/plugins/auth.ts
index fe19855..015c864 100644
--- a/packages/backend/src/plugins/auth.ts
+++ b/packages/backend/src/plugins/auth.ts
@@ -1,2 +1,3 @@
 import { createRouter } from '@backstage/plugin-auth-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -8,4 +9,11 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
-  return await createRouter({ logger, config, database, discovery });
+  tokenManager,
+}: PluginEnvironment): Promise<Router> {
+  return await createRouter({
+    logger,
+    config,
+    database,
+    discovery,
+    tokenManager,
+  });
 }
diff --git a/packages/backend/src/plugins/catalog.ts b/packages/backend/src/plugins/catalog.ts
index 10ac116..876cb6b 100644
--- a/packages/backend/src/plugins/catalog.ts
+++ b/packages/backend/src/plugins/catalog.ts
@@ -1,28 +1,14 @@
-import { useHotCleanup } from '@backstage/backend-common';
-import {
-  CatalogBuilder,
-  createRouter,
-  runPeriodically,
-} from '@backstage/plugin-catalog-backend';
+import { CatalogBuilder } from '@backstage/plugin-catalog-backend';
+import { ScaffolderEntitiesProcessor } from '@backstage/plugin-scaffolder-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
 
-export default async function createPlugin(env: PluginEnvironment) {
-  const builder = new CatalogBuilder(env);
-  const {
-    entitiesCatalog,
-    locationsCatalog,
-    higherOrderOperation,
-  } = await builder.build();
-
-  useHotCleanup(
-    module,
-    runPeriodically(() => higherOrderOperation.refreshAllLocations(), 100000),
-  );
-
-  return await createRouter({
-    entitiesCatalog,
-    locationsCatalog,
-    higherOrderOperation,
-    logger: env.logger,
-  });
+export default async function createPlugin(
+  env: PluginEnvironment,
+): Promise<Router> {
+  const builder = await CatalogBuilder.create(env);
+  builder.addProcessor(new ScaffolderEntitiesProcessor());
+  const { processingEngine, router } = await builder.build();
+  await processingEngine.start();
+  return router;
 }
diff --git a/packages/backend/src/plugins/proxy.ts b/packages/backend/src/plugins/proxy.ts
index 388d3fc..506f6d9 100644
--- a/packages/backend/src/plugins/proxy.ts
+++ b/packages/backend/src/plugins/proxy.ts
@@ -1,3 +1,3 @@
-// @ts-ignore
 import { createRouter } from '@backstage/plugin-proxy-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -8,3 +8,3 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({ logger, config, discovery });
diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
index 2dc69fe..6be2e97 100644
--- a/packages/backend/src/plugins/scaffolder.ts
+++ b/packages/backend/src/plugins/scaffolder.ts
@@ -1,21 +1,7 @@
-import {
-  CookieCutter,
-  createRouter,
-  FilePreparer,
-  GithubPreparer,
-  GitlabPreparer,
-  Preparers,
-  Publishers,
-  GithubPublisher,
-  GitlabPublisher,
-  CreateReactAppTemplater,
-  Templaters,
-  RepoVisibilityOptions,
-  CatalogEntityClient,
-} from '@backstage/plugin-scaffolder-backend';
-import { SingleHostDiscovery } from '@backstage/backend-common';
-import { Octokit } from '@octokit/rest';
-import { Gitlab } from '@gitbeaker/node';
-import type { PluginEnvironment } from '../types';
+import { DockerContainerRunner } from '@backstage/backend-common';
+import { CatalogClient } from '@backstage/catalog-client';
+import { createRouter } from '@backstage/plugin-scaffolder-backend';
 import Docker from 'dockerode';
+import { Router } from 'express';
+import type { PluginEnvironment } from '../types';
 
@@ -24,91 +10,17 @@ export default async function createPlugin({
   config,
-}: PluginEnvironment) {
-  const cookiecutterTemplater = new CookieCutter();
-  const craTemplater = new CreateReactAppTemplater();
-  const templaters = new Templaters();
-  templaters.register('cookiecutter', cookiecutterTemplater);
-  templaters.register('cra', craTemplater);
-
-  const filePreparer = new FilePreparer();
-  const githubPreparer = new GithubPreparer();
-  const gitlabPreparer = new GitlabPreparer(config);
-  const preparers = new Preparers();
-
-  preparers.register('file', filePreparer);
-  preparers.register('github', githubPreparer);
-  preparers.register('gitlab', gitlabPreparer);
-  preparers.register('gitlab/api', gitlabPreparer);
-
-  const publishers = new Publishers();
-
-  const githubConfig = config.getOptionalConfig('scaffolder.github');
-
-  if (githubConfig) {
-    try {
-      const repoVisibility = githubConfig.getString(
-        'visibility',
-      ) as RepoVisibilityOptions;
-
-      const githubToken = githubConfig.getString('token');
-      const githubHost = githubConfig.getOptionalString('host');
-      const githubClient = new Octokit({ auth: githubToken, baseUrl: githubHost });
-      const githubPublisher = new GithubPublisher({
-        client: githubClient,
-        token: githubToken,
-        repoVisibility,
-      });
-      publishers.register('file', githubPublisher);
-      publishers.register('github', githubPublisher);
-    } catch (e) {
-      const providerName = 'github';
-      if (process.env.NODE_ENV !== 'development') {
-        throw new Error(
-          `Failed to initialize ${providerName} scaffolding provider, ${e.message}`,
-        );
-      }
-
-      logger.warn(
-        `Skipping ${providerName} scaffolding provider, ${e.message}`,
-      );
-    }
-  }
-
-  const gitLabConfig = config.getOptionalConfig('scaffolder.gitlab.api');
-  if (gitLabConfig) {
-    try {
-      const gitLabToken = gitLabConfig.getString('token');
-      const gitLabClient = new Gitlab({
-        host: gitLabConfig.getOptionalString('baseUrl'),
-        token: gitLabToken,
-      });
-      const gitLabPublisher = new GitlabPublisher(gitLabClient, gitLabToken);
-      publishers.register('gitlab', gitLabPublisher);
-      publishers.register('gitlab/api', gitLabPublisher);
-    } catch (e) {
-      const providerName = 'gitlab';
-      if (process.env.NODE_ENV !== 'development') {
-        throw new Error(
-          `Failed to initialize ${providerName} scaffolding provider, ${e.message}`,
-        );
-      }
-
-      logger.warn(
-        `Skipping ${providerName} scaffolding provider, ${e.message}`,
-      );
-    }
-  }
-
+  database,
+  reader,
+  discovery,
+}: PluginEnvironment): Promise<Router> {
   const dockerClient = new Docker();
-
-  const discovery = SingleHostDiscovery.fromConfig(config);
-  const entityClient = new CatalogEntityClient({ discovery });
+  const containerRunner = new DockerContainerRunner({ dockerClient });
+  const catalogClient = new CatalogClient({ discoveryApi: discovery });
 
   return await createRouter({
-    preparers,
-    templaters,
-    publishers,
+    containerRunner,
     logger,
     config,
-    dockerClient,
-    entityClient,
+    database,
+    catalogClient,
+    reader,
   });
diff --git a/packages/backend/src/plugins/search.ts b/packages/backend/src/plugins/search.ts
new file mode 100644
index 0000000..a0a1cc3
--- /dev/null
+++ b/packages/backend/src/plugins/search.ts
@@ -0,0 +1,58 @@
+import { useHotCleanup } from '@backstage/backend-common';
+import { createRouter } from '@backstage/plugin-search-backend';
+import {
+  IndexBuilder,
+  LunrSearchEngine,
+} from '@backstage/plugin-search-backend-node';
+import { PluginEnvironment } from '../types';
+import { DefaultCatalogCollator } from '@backstage/plugin-catalog-backend';
+import { DefaultTechDocsCollator } from '@backstage/plugin-techdocs-backend';
+
+export default async function createPlugin({
+  logger,
+  permissions,
+  discovery,
+  config,
+  tokenManager,
+}: PluginEnvironment) {
+  // Initialize a connection to a search engine.
+  const searchEngine = new LunrSearchEngine({ logger });
+  const indexBuilder = new IndexBuilder({ logger, searchEngine });
+
+  // Collators are responsible for gathering documents known to plugins. This
+  // collator gathers entities from the software catalog.
+  indexBuilder.addCollator({
+    defaultRefreshIntervalSeconds: 600,
+    collator: DefaultCatalogCollator.fromConfig(config, {
+      discovery,
+      tokenManager,
+    }),
+  });
+
+  // collator gathers entities from techdocs.
+  indexBuilder.addCollator({
+    defaultRefreshIntervalSeconds: 600,
+    collator: DefaultTechDocsCollator.fromConfig(config, {
+      discovery,
+      logger,
+      tokenManager,
+    }),
+  });
+
+  // The scheduler controls when documents are gathered from collators and sent
+  // to the search engine for indexing.
+  const { scheduler } = await indexBuilder.build();
+
+  // A 3 second delay gives the backend server a chance to initialize before
+  // any collators are executed, which may attempt requests against the API.
+  setTimeout(() => scheduler.start(), 3000);
+  useHotCleanup(module, () => scheduler.stop());
+
+  return await createRouter({
+    engine: indexBuilder.getSearchEngine(),
+    types: indexBuilder.getDocumentTypes(),
+    permissions,
+    config,
+    logger,
+  });
+}
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
index ac4d81a..054c64d 100644
--- a/packages/backend/src/plugins/techdocs.ts
+++ b/packages/backend/src/plugins/techdocs.ts
@@ -1,12 +1,11 @@
+import { DockerContainerRunner } from '@backstage/backend-common';
 import {
   createRouter,
-  DirectoryPreparer,
-  CommonGitPreparer,
-  Preparers,
   Generators,
-  LocalPublish,
-  TechdocsGenerator,
+  Preparers,
+  Publisher,
 } from '@backstage/plugin-techdocs-backend';
-import { PluginEnvironment } from '../types';
 import Docker from 'dockerode';
+import { Router } from 'express';
+import { PluginEnvironment } from '../types';
 
@@ -16,19 +15,31 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
-  const generators = new Generators();
-  const techdocsGenerator = new TechdocsGenerator(logger, config);
-
-  generators.register('techdocs', techdocsGenerator);
+  reader,
+  cache,
+}: PluginEnvironment): Promise<Router> {
+  // Preparers are responsible for fetching source files for documentation.
+  const preparers = await Preparers.fromConfig(config, {
+    logger,
+    reader,
+  });
 
-  const preparers = new Preparers();
-  const directoryPreparer = new DirectoryPreparer(logger);
-  const commonGitPreparer = new CommonGitPreparer(logger);
+  // Docker client (conditionally) used by the generators, based on techdocs.generators config.
+  const dockerClient = new Docker();
+  const containerRunner = new DockerContainerRunner({ dockerClient });
 
-  preparers.register('dir', directoryPreparer);
-  preparers.register('github', commonGitPreparer);
-  preparers.register('gitlab', commonGitPreparer);
+  // Generators are used for generating documentation sites.
+  const generators = await Generators.fromConfig(config, {
+    logger,
+    containerRunner,
+  });
 
-  const publisher = new LocalPublish(logger, discovery);
+  // Publisher is used for
+  // 1. Publishing generated files to storage
+  // 2. Fetching files from storage and passing them to TechDocs frontend.
+  const publisher = await Publisher.fromConfig(config, {
+    logger,
+    discovery,
+  });
 
-  const dockerClient = new Docker();
+  // checks if the publisher is working and logs the result
+  await publisher.getReadiness();
 
@@ -38,3 +49,2 @@ export default async function createPlugin({
     publisher,
-    dockerClient,
     logger,
@@ -42,2 +52,3 @@ export default async function createPlugin({
     discovery,
+    cache,
   });
diff --git a/packages/backend/src/types.ts b/packages/backend/src/types.ts
index 757a0e5..0862b0e 100644
--- a/packages/backend/src/types.ts
+++ b/packages/backend/src/types.ts
@@ -3,6 +3,10 @@ import { Config } from '@backstage/config';
 import {
+  PluginCacheManager,
   PluginDatabaseManager,
   PluginEndpointDiscovery,
+  TokenManager,
   UrlReader,
 } from '@backstage/backend-common';
+import { PluginTaskScheduler } from '@backstage/backend-tasks';
+import { PermissionAuthorizer } from '@backstage/plugin-permission-common';
 
@@ -11,5 +15,9 @@ export type PluginEnvironment = {
   database: PluginDatabaseManager;
+  cache: PluginCacheManager;
   config: Config;
-  reader: UrlReader
+  reader: UrlReader;
   discovery: PluginEndpointDiscovery;
+  tokenManager: TokenManager;
+  scheduler: PluginTaskScheduler;
+  permissions: PermissionAuthorizer;
 };
diff --git a/releases.json b/releases.json
deleted file mode 100644
index 5518dc3..0000000
--- a/releases.json
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-  "0.1.1": {},
-  "0.2.0": {},
-  "0.2.1": {}
-}
